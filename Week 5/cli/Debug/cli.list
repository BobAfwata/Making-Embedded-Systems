
cli.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003598  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  080036a4  080036a4  000136a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b2c  08003b2c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b30  08003b30  00013b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000070  08003ba4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08003ba4  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d196  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270d  00000000  00000000  0002d22f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002f940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00030748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017fd9  00000000  00000000  00031438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa94  00000000  00000000  00049411  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008acd9  00000000  00000000  00058ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3b7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003930  00000000  00000000  000e3bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800368c 	.word	0x0800368c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800368c 	.word	0x0800368c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HAL_TIM_PeriodElapsedCallback>:

static volatile bool blinkieBtnEvt = false;
static volatile bool blinkieTmrEvt = false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
    // toggle on every interrupt
    if (TMRisBlinkHandle(htim))
 8000168:	6878      	ldr	r0, [r7, #4]
 800016a:	f000 faa5 	bl	80006b8 <TMRisBlinkHandle>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d002      	beq.n	800017a <HAL_TIM_PeriodElapsedCallback+0x1a>
    {
        blinkieTmrEvt = true;
 8000174:	4b03      	ldr	r3, [pc, #12]	; (8000184 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000176:	2201      	movs	r2, #1
 8000178:	701a      	strb	r2, [r3, #0]
    }
}
 800017a:	bf00      	nop
 800017c:	3708      	adds	r7, #8
 800017e:	46bd      	mov	sp, r7
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	2000008d 	.word	0x2000008d

08000188 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	80fb      	strh	r3, [r7, #6]
    if (BTN_USER.pin == GPIO_Pin)
 8000192:	4b06      	ldr	r3, [pc, #24]	; (80001ac <HAL_GPIO_EXTI_Callback+0x24>)
 8000194:	889b      	ldrh	r3, [r3, #4]
 8000196:	88fa      	ldrh	r2, [r7, #6]
 8000198:	429a      	cmp	r2, r3
 800019a:	d102      	bne.n	80001a2 <HAL_GPIO_EXTI_Callback+0x1a>
    {
        blinkieBtnEvt = true;
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <HAL_GPIO_EXTI_Callback+0x28>)
 800019e:	2201      	movs	r2, #1
 80001a0:	701a      	strb	r2, [r3, #0]
    }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	080037b8 	.word	0x080037b8
 80001b0:	2000008c 	.word	0x2000008c

080001b4 <EXTI0_IRQHandler>:
#include "led.h"

const BTN BTN_USER = {GPIOA, GPIO_PIN_0};

void EXTI0_IRQHandler(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80001b8:	2001      	movs	r0, #1
 80001ba:	f001 fca7 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <LEDinit>:
// physical pin maps
const LED LED_RED   = {GPIOC, GPIO_PIN_13};
const LED LED_GREEN = {GPIOC, GPIO_PIN_14};

void LEDinit(LED led)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	463b      	mov	r3, r7
 80001cc:	e883 0003 	stmia.w	r3, {r0, r1}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d0:	4b0f      	ldr	r3, [pc, #60]	; (8000210 <LEDinit+0x4c>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a0e      	ldr	r2, [pc, #56]	; (8000210 <LEDinit+0x4c>)
 80001d6:	f043 0310 	orr.w	r3, r3, #16
 80001da:	6193      	str	r3, [r2, #24]
 80001dc:	4b0c      	ldr	r3, [pc, #48]	; (8000210 <LEDinit+0x4c>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	f003 0310 	and.w	r3, r3, #16
 80001e4:	60fb      	str	r3, [r7, #12]
 80001e6:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitTypeDef GPIO_InitStruct;

    GPIO_InitStruct.Pin = led.pin;
 80001e8:	88bb      	ldrh	r3, [r7, #4]
 80001ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001f0:	2301      	movs	r3, #1
 80001f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80001f4:	2303      	movs	r3, #3
 80001f6:	61fb      	str	r3, [r7, #28]

    HAL_GPIO_Init(led.port, &GPIO_InitStruct);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	f107 0210 	add.w	r2, r7, #16
 80001fe:	4611      	mov	r1, r2
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fae7 	bl	80017d4 <HAL_GPIO_Init>
}
 8000206:	bf00      	nop
 8000208:	3720      	adds	r7, #32
 800020a:	46bd      	mov	sp, r7
 800020c:	bd80      	pop	{r7, pc}
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000

08000214 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000218:	f001 f8bc 	bl	8001394 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800021c:	f000 f81e 	bl	800025c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000220:	f000 f8de 	bl	80003e0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000224:	f000 f8b2 	bl	800038c <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000228:	f000 f85e 	bl	80002e8 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	LEDinit( LED_RED);
 800022c:	4b09      	ldr	r3, [pc, #36]	; (8000254 <main+0x40>)
 800022e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000232:	f7ff ffc7 	bl	80001c4 <LEDinit>
	LEDinit( LED_GREEN);
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <main+0x44>)
 8000238:	e893 0003 	ldmia.w	r3, {r0, r1}
 800023c:	f7ff ffc2 	bl	80001c4 <LEDinit>

	UARTinit();
 8000240:	f000 faae 	bl	80007a0 <UARTinit>

	UARTreceiveByte();
 8000244:	f000 fa9e 	bl	8000784 <UARTreceiveByte>

	ConsoleInit();
 8000248:	f000 fbce 	bl	80009e8 <ConsoleInit>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		ConsoleProcess();
 800024c:	f000 fbfa 	bl	8000a44 <ConsoleProcess>
 8000250:	e7fc      	b.n	800024c <main+0x38>
 8000252:	bf00      	nop
 8000254:	080037c0 	.word	0x080037c0
 8000258:	080037c8 	.word	0x080037c8

0800025c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	; 0x40
 8000260:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	; 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f003 f980 	bl	8003570 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fc49 	bl	8001b3c <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
		Error_Handler();
 80002b0:	f000 f928 	bl	8000504 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 feb6 	bl	8002040 <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
		Error_Handler();
 80002da:	f000 f913 	bl	8000504 <Error_Handler>
	}
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	; 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b088      	sub	sp, #32
 80002ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80002ee:	f107 030c 	add.w	r3, r7, #12
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
 80002f8:	609a      	str	r2, [r3, #8]
 80002fa:	60da      	str	r2, [r3, #12]
 80002fc:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80002fe:	1d3b      	adds	r3, r7, #4
 8000300:	2200      	movs	r2, #0
 8000302:	601a      	str	r2, [r3, #0]
 8000304:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000306:	4b1f      	ldr	r3, [pc, #124]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000308:	4a1f      	ldr	r2, [pc, #124]	; (8000388 <MX_TIM1_Init+0xa0>)
 800030a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <MX_TIM1_Init+0x9c>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000312:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <MX_TIM1_Init+0x9c>)
 800031a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800031e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000328:	2200      	movs	r2, #0
 800032a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <MX_TIM1_Init+0x9c>)
 800032e:	2200      	movs	r2, #0
 8000330:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000332:	4814      	ldr	r0, [pc, #80]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000334:	f002 f81c 	bl	8002370 <HAL_TIM_Base_Init>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM1_Init+0x5a>
		Error_Handler();
 800033e:	f000 f8e1 	bl	8000504 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000342:	2307      	movs	r3, #7
 8000344:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	4619      	mov	r1, r3
 8000350:	480c      	ldr	r0, [pc, #48]	; (8000384 <MX_TIM1_Init+0x9c>)
 8000352:	f002 f964 	bl	800261e <HAL_TIM_SlaveConfigSynchro>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_TIM1_Init+0x78>
		Error_Handler();
 800035c:	f000 f8d2 	bl	8000504 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000360:	2300      	movs	r3, #0
 8000362:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000364:	2300      	movs	r3, #0
 8000366:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	4619      	mov	r1, r3
 800036c:	4805      	ldr	r0, [pc, #20]	; (8000384 <MX_TIM1_Init+0x9c>)
 800036e:	f002 fb29 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_TIM1_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8000378:	f000 f8c4 	bl	8000504 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	20000090 	.word	0x20000090
 8000388:	40012c00 	.word	0x40012c00

0800038c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000392:	4a12      	ldr	r2, [pc, #72]	; (80003dc <MX_USART1_UART_Init+0x50>)
 8000394:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 8000398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800039c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039e:	4b0e      	ldr	r3, [pc, #56]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80003b0:	4b09      	ldr	r3, [pc, #36]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b2:	220c      	movs	r2, #12
 80003b4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003be:	2200      	movs	r2, #0
 80003c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80003c2:	4805      	ldr	r0, [pc, #20]	; (80003d8 <MX_USART1_UART_Init+0x4c>)
 80003c4:	f002 fb6e 	bl	8002aa4 <HAL_UART_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80003ce:	f000 f899 	bl	8000504 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80003d2:	bf00      	nop
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	200000d8 	.word	0x200000d8
 80003dc:	40013800 	.word	0x40013800

080003e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b088      	sub	sp, #32
 80003e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80003f4:	4b3f      	ldr	r3, [pc, #252]	; (80004f4 <MX_GPIO_Init+0x114>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a3e      	ldr	r2, [pc, #248]	; (80004f4 <MX_GPIO_Init+0x114>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b3c      	ldr	r3, [pc, #240]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0310 	and.w	r3, r3, #16
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800040c:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <MX_GPIO_Init+0x114>)
 800040e:	699b      	ldr	r3, [r3, #24]
 8000410:	4a38      	ldr	r2, [pc, #224]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6193      	str	r3, [r2, #24]
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <MX_GPIO_Init+0x114>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	f003 0320 	and.w	r3, r3, #32
 8000420:	60bb      	str	r3, [r7, #8]
 8000422:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b33      	ldr	r3, [pc, #204]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a32      	ldr	r2, [pc, #200]	; (80004f4 <MX_GPIO_Init+0x114>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b30      	ldr	r3, [pc, #192]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800043c:	4b2d      	ldr	r3, [pc, #180]	; (80004f4 <MX_GPIO_Init+0x114>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	4a2c      	ldr	r2, [pc, #176]	; (80004f4 <MX_GPIO_Init+0x114>)
 8000442:	f043 0304 	orr.w	r3, r3, #4
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b2a      	ldr	r3, [pc, #168]	; (80004f4 <MX_GPIO_Init+0x114>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f003 0304 	and.w	r3, r3, #4
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800045a:	4827      	ldr	r0, [pc, #156]	; (80004f8 <MX_GPIO_Init+0x118>)
 800045c:	f001 fb3e 	bl	8001adc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000466:	4825      	ldr	r0, [pc, #148]	; (80004fc <MX_GPIO_Init+0x11c>)
 8000468:	f001 fb38 	bl	8001adc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <MX_GPIO_Init+0x120>)
 8000474:	f001 fb32 	bl	8001adc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC14 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8000478:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800047c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047e:	2301      	movs	r3, #1
 8000480:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	2300      	movs	r3, #0
 8000484:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000486:	2302      	movs	r3, #2
 8000488:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800048a:	f107 0310 	add.w	r3, r7, #16
 800048e:	4619      	mov	r1, r3
 8000490:	4819      	ldr	r0, [pc, #100]	; (80004f8 <MX_GPIO_Init+0x118>)
 8000492:	f001 f99f 	bl	80017d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_USER_Pin */
	GPIO_InitStruct.Pin = BTN_USER_Pin;
 8000496:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800049a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800049c:	2300      	movs	r3, #0
 800049e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a0:	2300      	movs	r3, #0
 80004a2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_USER_GPIO_Port, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4814      	ldr	r0, [pc, #80]	; (80004fc <MX_GPIO_Init+0x11c>)
 80004ac:	f001 f992 	bl	80017d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80004b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004b4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	2301      	movs	r3, #1
 80004b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ba:	2300      	movs	r3, #0
 80004bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004be:	2302      	movs	r3, #2
 80004c0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	4619      	mov	r1, r3
 80004c8:	480c      	ldr	r0, [pc, #48]	; (80004fc <MX_GPIO_Init+0x11c>)
 80004ca:	f001 f983 	bl	80017d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 80004ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004d2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d4:	2301      	movs	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	2300      	movs	r3, #0
 80004da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	2302      	movs	r3, #2
 80004de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	4619      	mov	r1, r3
 80004e6:	4806      	ldr	r0, [pc, #24]	; (8000500 <MX_GPIO_Init+0x120>)
 80004e8:	f001 f974 	bl	80017d4 <HAL_GPIO_Init>

}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40011000 	.word	0x40011000
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	40010800 	.word	0x40010800

08000504 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800050c:	e7fe      	b.n	800050c <Error_Handler+0x8>
	...

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <HAL_MspInit+0x5c>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a14      	ldr	r2, [pc, #80]	; (800056c <HAL_MspInit+0x5c>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_MspInit+0x5c>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	60bb      	str	r3, [r7, #8]
 800052c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x5c>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x5c>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x5c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000546:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <HAL_MspInit+0x60>)
 8000548:	685b      	ldr	r3, [r3, #4]
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	4a04      	ldr	r2, [pc, #16]	; (8000570 <HAL_MspInit+0x60>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	bf00      	nop
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	40021000 	.word	0x40021000
 8000570:	40010000 	.word	0x40010000

08000574 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000574:	b480      	push	{r7}
 8000576:	b085      	sub	sp, #20
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <HAL_TIM_Base_MspInit+0x34>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d10b      	bne.n	800059e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 800058c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_TIM_Base_MspInit+0x38>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800059e:	bf00      	nop
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr
 80005a8:	40012c00 	.word	0x40012c00
 80005ac:	40021000 	.word	0x40021000

080005b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b088      	sub	sp, #32
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a1c      	ldr	r2, [pc, #112]	; (800063c <HAL_UART_MspInit+0x8c>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d131      	bne.n	8000634 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a1a      	ldr	r2, [pc, #104]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a14      	ldr	r2, [pc, #80]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_UART_MspInit+0x90>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000604:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000606:	2302      	movs	r3, #2
 8000608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800060a:	2303      	movs	r3, #3
 800060c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	f107 0310 	add.w	r3, r7, #16
 8000612:	4619      	mov	r1, r3
 8000614:	480b      	ldr	r0, [pc, #44]	; (8000644 <HAL_UART_MspInit+0x94>)
 8000616:	f001 f8dd 	bl	80017d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800061a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800061e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	4619      	mov	r1, r3
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <HAL_UART_MspInit+0x94>)
 8000630:	f001 f8d0 	bl	80017d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000634:	bf00      	nop
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40013800 	.word	0x40013800
 8000640:	40021000 	.word	0x40021000
 8000644:	40010800 	.word	0x40010800

08000648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800064c:	e7fe      	b.n	800064c <NMI_Handler+0x4>

0800064e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <HardFault_Handler+0x4>

08000654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <MemManage_Handler+0x4>

0800065a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <BusFault_Handler+0x4>

08000660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000664:	e7fe      	b.n	8000664 <UsageFault_Handler+0x4>

08000666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr

0800068a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800068e:	f000 fec7 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}

08000696 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
	...

080006a4 <TIM1_UP_IRQHandler>:
// used to blink led
static TIM_HandleTypeDef blinkTimer; 

// timer 1
void TIM1_UP_TIM10_IRQHandler()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&blinkTimer);
 80006a8:	4802      	ldr	r0, [pc, #8]	; (80006b4 <TIM1_UP_IRQHandler+0x10>)
 80006aa:	f001 feb0 	bl	800240e <HAL_TIM_IRQHandler>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000011c 	.word	0x2000011c

080006b8 <TMRisBlinkHandle>:
{
    HAL_TIM_Base_Stop_IT(&blinkTimer);
}

bool TMRisBlinkHandle(TIM_HandleTypeDef* htim)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    return (&blinkTimer == htim);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	4a05      	ldr	r2, [pc, #20]	; (80006d8 <TMRisBlinkHandle+0x20>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	bf0c      	ite	eq
 80006c8:	2301      	moveq	r3, #1
 80006ca:	2300      	movne	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	2000011c 	.word	0x2000011c

080006dc <USART1_IRQHandler>:
static volatile bool isReceived = false; 

static uint8_t byte;

void USART1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
    HAL_UART_IRQHandler(&sHandleUSART1);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <USART1_IRQHandler+0x10>)
 80006e2:	f002 faef 	bl	8002cc4 <HAL_UART_IRQHandler>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000164 	.word	0x20000164

080006f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a07      	ldr	r2, [pc, #28]	; (800071c <HAL_UART_RxCpltCallback+0x2c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d107      	bne.n	8000712 <HAL_UART_RxCpltCallback+0x22>
    {
        HAL_UART_Receive_IT(&sHandleUSART1, &byte, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	4906      	ldr	r1, [pc, #24]	; (8000720 <HAL_UART_RxCpltCallback+0x30>)
 8000706:	4807      	ldr	r0, [pc, #28]	; (8000724 <HAL_UART_RxCpltCallback+0x34>)
 8000708:	f002 faab 	bl	8002c62 <HAL_UART_Receive_IT>

        isReceived = true;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_UART_RxCpltCallback+0x38>)
 800070e:	2201      	movs	r2, #1
 8000710:	701a      	strb	r2, [r3, #0]
    }
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40013800 	.word	0x40013800
 8000720:	200001a9 	.word	0x200001a9
 8000724:	20000164 	.word	0x20000164
 8000728:	200001a8 	.word	0x200001a8

0800072c <UARTsendByte>:

void UARTsendByte(uint8_t* byte)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&sHandleUSART1, byte, 1, 10);    
 8000734:	230a      	movs	r3, #10
 8000736:	2201      	movs	r2, #1
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <UARTsendByte+0x1c>)
 800073c:	f002 f9ff 	bl	8002b3e <HAL_UART_Transmit>
}
 8000740:	bf00      	nop
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000164 	.word	0x20000164

0800074c <UARTisReady>:

bool UARTisReady()
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
    return isReceived;
 8000750:	4b03      	ldr	r3, [pc, #12]	; (8000760 <UARTisReady+0x14>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200001a8 	.word	0x200001a8

08000764 <UARTgetByte>:

uint8_t UARTgetByte()
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
    isReceived = false;
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <UARTgetByte+0x18>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
    return byte;
 800076e:	4b04      	ldr	r3, [pc, #16]	; (8000780 <UARTgetByte+0x1c>)
 8000770:	781b      	ldrb	r3, [r3, #0]
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	200001a8 	.word	0x200001a8
 8000780:	200001a9 	.word	0x200001a9

08000784 <UARTreceiveByte>:

void UARTreceiveByte()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&sHandleUSART1, &byte, 1);
 8000788:	2201      	movs	r2, #1
 800078a:	4903      	ldr	r1, [pc, #12]	; (8000798 <UARTreceiveByte+0x14>)
 800078c:	4803      	ldr	r0, [pc, #12]	; (800079c <UARTreceiveByte+0x18>)
 800078e:	f002 fa68 	bl	8002c62 <HAL_UART_Receive_IT>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001a9 	.word	0x200001a9
 800079c:	20000164 	.word	0x20000164

080007a0 <UARTinit>:

void UARTinit()
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b26      	ldr	r3, [pc, #152]	; (8000840 <UARTinit+0xa0>)
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	4a25      	ldr	r2, [pc, #148]	; (8000840 <UARTinit+0xa0>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6193      	str	r3, [r2, #24]
 80007b2:	4b23      	ldr	r3, [pc, #140]	; (8000840 <UARTinit+0xa0>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_USART1_CLK_ENABLE();
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <UARTinit+0xa0>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <UARTinit+0xa0>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <UARTinit+0xa0>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef  GPIO_InitStruct;
 
    GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80007d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80007da:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
   // GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
   // GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
  
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	4619      	mov	r1, r3
 80007ea:	4816      	ldr	r0, [pc, #88]	; (8000844 <UARTinit+0xa4>)
 80007ec:	f000 fff2 	bl	80017d4 <HAL_GPIO_Init>

    sHandleUSART1.Instance = USART1;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <UARTinit+0xa8>)
 80007f2:	4a16      	ldr	r2, [pc, #88]	; (800084c <UARTinit+0xac>)
 80007f4:	601a      	str	r2, [r3, #0]
    sHandleUSART1.Init.BaudRate = BAUD_RATE;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <UARTinit+0xa8>)
 80007f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007fc:	605a      	str	r2, [r3, #4]
    sHandleUSART1.Init.WordLength = UART_WORDLENGTH_8B;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <UARTinit+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    sHandleUSART1.Init.StopBits = UART_STOPBITS_1;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <UARTinit+0xa8>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
    sHandleUSART1.Init.Parity = UART_PARITY_NONE;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <UARTinit+0xa8>)
 800080c:	2200      	movs	r2, #0
 800080e:	611a      	str	r2, [r3, #16]
    sHandleUSART1.Init.Mode = UART_MODE_TX_RX;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <UARTinit+0xa8>)
 8000812:	220c      	movs	r2, #12
 8000814:	615a      	str	r2, [r3, #20]
    sHandleUSART1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <UARTinit+0xa8>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
    sHandleUSART1.Init.OverSampling = UART_OVERSAMPLING_16;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <UARTinit+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]

    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2025      	movs	r0, #37	; 0x25
 8000828:	f000 feed 	bl	8001606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800082c:	2025      	movs	r0, #37	; 0x25
 800082e:	f000 ff06 	bl	800163e <HAL_NVIC_EnableIRQ>
    HAL_UART_Init(&sHandleUSART1);
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <UARTinit+0xa8>)
 8000834:	f002 f936 	bl	8002aa4 <HAL_UART_Init>
}
 8000838:	bf00      	nop
 800083a:	3718      	adds	r7, #24
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	40010800 	.word	0x40010800
 8000848:	20000164 	.word	0x20000164
 800084c:	40013800 	.word	0x40013800

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000876:	f7ff ff0e 	bl	8000696 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087a:	f002 fe55 	bl	8003528 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fcc9 	bl	8000214 <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800088c:	08003b34 	.word	0x08003b34
  ldr r2, =_sbss
 8000890:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000894:	200002b8 	.word	0x200002b8

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>

0800089a <ConsoleCommandMatch>:

// ConsoleCommandMatch
// Look to see if the data in the buffer matches the command name given that
// the strings are different lengths and we have parameter separators
static uint32_t ConsoleCommandMatch(const char* name, const char *buffer)
{
 800089a:	b480      	push	{r7}
 800089c:	b085      	sub	sp, #20
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	6039      	str	r1, [r7, #0]
	uint32_t i = 0u;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
	uint32_t result = 0u; // match
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]

	if ( buffer[i] == name [i] )
 80008ac:	683a      	ldr	r2, [r7, #0]
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	4413      	add	r3, r2
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	6879      	ldr	r1, [r7, #4]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	440b      	add	r3, r1
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	429a      	cmp	r2, r3
 80008be:	d114      	bne.n	80008ea <ConsoleCommandMatch+0x50>
	{
		result = 1u;
 80008c0:	2301      	movs	r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
		i++;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	while ( ( 1u == result ) &&
 80008ca:	e00e      	b.n	80008ea <ConsoleCommandMatch+0x50>
		( buffer[i] != PARAMETER_SEPARATER ) &&
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
		( buffer[i] != (char) NULL_CHAR )
		)
	{
		if ( buffer[i] != name[i] )
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	6879      	ldr	r1, [r7, #4]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	440b      	add	r3, r1
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d001      	beq.n	80008e4 <ConsoleCommandMatch+0x4a>
		{
			result = 0u;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
		}
		i++;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60fb      	str	r3, [r7, #12]
	while ( ( 1u == result ) &&
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d11a      	bne.n	8000926 <ConsoleCommandMatch+0x8c>
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b09      	cmp	r3, #9
 80008f4:	d817      	bhi.n	8000926 <ConsoleCommandMatch+0x8c>
		( buffer[i] != PARAMETER_SEPARATER ) &&
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4413      	add	r3, r2
 80008fc:	781b      	ldrb	r3, [r3, #0]
		( i < CONSOLE_COMMAND_MAX_COMMAND_LENGTH )  &&
 80008fe:	2b20      	cmp	r3, #32
 8000900:	d011      	beq.n	8000926 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	4413      	add	r3, r2
 8000908:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != PARAMETER_SEPARATER ) &&
 800090a:	2b0a      	cmp	r3, #10
 800090c:	d00b      	beq.n	8000926 <ConsoleCommandMatch+0x8c>
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	4413      	add	r3, r2
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b0d      	cmp	r3, #13
 8000918:	d005      	beq.n	8000926 <ConsoleCommandMatch+0x8c>
		( buffer[i] != (char) NULL_CHAR )
 800091a:	683a      	ldr	r2, [r7, #0]
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4413      	add	r3, r2
 8000920:	781b      	ldrb	r3, [r3, #0]
		( buffer[i] != LF_CHAR ) &&( buffer[i] != CR_CHAR ) &&
 8000922:	2b00      	cmp	r3, #0
 8000924:	d1d2      	bne.n	80008cc <ConsoleCommandMatch+0x32>
	}

	return result;
 8000926:	68bb      	ldr	r3, [r7, #8]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr

08000932 <ConsoleResetBuffer>:
// In an ideal world, this would just zero out the buffer. However, thre are times when the
// buffer may have data beyond what was used in the last command.
// We don't want to lose that data so we move it to the start of the command buffer and then zero
// the rest.
static uint32_t ConsoleResetBuffer(char receiveBuffer[], const uint32_t filledLength, uint32_t usedSoFar)
{
 8000932:	b480      	push	{r7}
 8000934:	b087      	sub	sp, #28
 8000936:	af00      	add	r7, sp, #0
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	60b9      	str	r1, [r7, #8]
 800093c:	607a      	str	r2, [r7, #4]
	uint32_t remaining = (filledLength - usedSoFar);
 800093e:	68ba      	ldr	r2, [r7, #8]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	613b      	str	r3, [r7, #16]
	uint32_t i = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]

	while (usedSoFar < filledLength)
 800094a:	e00d      	b.n	8000968 <ConsoleResetBuffer+0x36>
	{
		receiveBuffer[i] = receiveBuffer[usedSoFar]; // move the end to the start
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	441a      	add	r2, r3
 8000952:	68f9      	ldr	r1, [r7, #12]
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	440b      	add	r3, r1
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	701a      	strb	r2, [r3, #0]
		i++;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	3301      	adds	r3, #1
 8000960:	617b      	str	r3, [r7, #20]
		usedSoFar++;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	3301      	adds	r3, #1
 8000966:	607b      	str	r3, [r7, #4]
	while (usedSoFar < filledLength)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	429a      	cmp	r2, r3
 800096e:	d3ed      	bcc.n	800094c <ConsoleResetBuffer+0x1a>
	}
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000970:	e007      	b.n	8000982 <ConsoleResetBuffer+0x50>
	{
		receiveBuffer[i] =  NULL_CHAR;
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	4413      	add	r3, r2
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]
	for ( /* nothing */ ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	2bff      	cmp	r3, #255	; 0xff
 8000986:	d9f4      	bls.n	8000972 <ConsoleResetBuffer+0x40>
	}
	return remaining;
 8000988:	693b      	ldr	r3, [r7, #16]
}
 800098a:	4618      	mov	r0, r3
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <ConsoleCommandEndline>:

// ConsoleCommandEndline
// Check to see where in the buffer stream the endline is; that is the end of the command and parameters
static int32_t ConsoleCommandEndline(const char receiveBuffer[], const  uint32_t filledLength)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
	int32_t result = NOT_FOUND; // if no endline is found, then return -1 (NOT_FOUND)
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	60bb      	str	r3, [r7, #8]

	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80009a8:	e002      	b.n	80009b0 <ConsoleCommandEndline+0x1c>
			&& ( i < filledLength ) )
	{
		i++;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	3301      	adds	r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
	while ( ( CR_CHAR != receiveBuffer[i])  && (LF_CHAR != receiveBuffer[i])
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	4413      	add	r3, r2
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	2b0d      	cmp	r3, #13
 80009ba:	d009      	beq.n	80009d0 <ConsoleCommandEndline+0x3c>
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b0a      	cmp	r3, #10
 80009c6:	d003      	beq.n	80009d0 <ConsoleCommandEndline+0x3c>
			&& ( i < filledLength ) )
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3ec      	bcc.n	80009aa <ConsoleCommandEndline+0x16>
	}
	if ( i < filledLength )
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d201      	bcs.n	80009dc <ConsoleCommandEndline+0x48>
	{
		result = i;
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	60bb      	str	r3, [r7, #8]
	}
	return result;
 80009dc:	68bb      	ldr	r3, [r7, #8]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <ConsoleInit>:

// ConsoleInit
// Initialize the console interface and all it depends on
void ConsoleInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	uint32_t i;

	ConsoleIoInit();
 80009ee:	f000 fc8f 	bl	8001310 <ConsoleIoInit>
	ConsoleIoSendString("Welcome to the Consolinator, your gateway to testing code and hardware.");	
 80009f2:	480f      	ldr	r0, [pc, #60]	; (8000a30 <ConsoleInit+0x48>)
 80009f4:	f000 fcba 	bl	800136c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <ConsoleInit+0x4c>)
 80009fa:	f000 fcb7 	bl	800136c <ConsoleIoSendString>
	ConsoleIoSendString(CONSOLE_PROMPT);
 80009fe:	480e      	ldr	r0, [pc, #56]	; (8000a38 <ConsoleInit+0x50>)
 8000a00:	f000 fcb4 	bl	800136c <ConsoleIoSendString>
	mReceivedSoFar = 0u;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <ConsoleInit+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]

	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	e007      	b.n	8000a20 <ConsoleInit+0x38>
	{
		mReceiveBuffer[i] = NULL_CHAR;
 8000a10:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <ConsoleInit+0x58>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
	for ( i = 0u ; i < CONSOLE_COMMAND_MAX_LENGTH ; i++)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2bff      	cmp	r3, #255	; 0xff
 8000a24:	d9f4      	bls.n	8000a10 <ConsoleInit+0x28>
	}

}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	080036a4 	.word	0x080036a4
 8000a34:	080036ec 	.word	0x080036ec
 8000a38:	080036f0 	.word	0x080036f0
 8000a3c:	200002ac 	.word	0x200002ac
 8000a40:	200001ac 	.word	0x200001ac

08000a44 <ConsoleProcess>:

// ConsoleProcess
// Looks for new inputs, checks for endline, then runs the matching command.
// Call ConsoleProcess from a loop, it will handle commands as they become available
void ConsoleProcess(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0
	uint32_t cmdIndex;
	int32_t  cmdEndline;
	int32_t  found;
	eCommandResult_T result;

	ConsoleIoReceive((uint8_t*)&(mReceiveBuffer[mReceivedSoFar]), ( CONSOLE_COMMAND_MAX_LENGTH - mReceivedSoFar ), &received);
 8000a4a:	4b54      	ldr	r3, [pc, #336]	; (8000b9c <ConsoleProcess+0x158>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a54      	ldr	r2, [pc, #336]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000a50:	1898      	adds	r0, r3, r2
 8000a52:	4b52      	ldr	r3, [pc, #328]	; (8000b9c <ConsoleProcess+0x158>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000a5a:	463a      	mov	r2, r7
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	f000 fc5e 	bl	800131e <ConsoleIoReceive>
	if ( received > 0u || mReceiveBufferNeedsChecking)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d104      	bne.n	8000a72 <ConsoleProcess+0x2e>
 8000a68:	4b4e      	ldr	r3, [pc, #312]	; (8000ba4 <ConsoleProcess+0x160>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	f000 8091 	beq.w	8000b94 <ConsoleProcess+0x150>
	{
		mReceiveBufferNeedsChecking = false;
 8000a72:	4b4c      	ldr	r3, [pc, #304]	; (8000ba4 <ConsoleProcess+0x160>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
		mReceivedSoFar += received;
 8000a78:	4b48      	ldr	r3, [pc, #288]	; (8000b9c <ConsoleProcess+0x158>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a46      	ldr	r2, [pc, #280]	; (8000b9c <ConsoleProcess+0x158>)
 8000a82:	6013      	str	r3, [r2, #0]
		cmdEndline = ConsoleCommandEndline(mReceiveBuffer, mReceivedSoFar);
 8000a84:	4b45      	ldr	r3, [pc, #276]	; (8000b9c <ConsoleProcess+0x158>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4845      	ldr	r0, [pc, #276]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000a8c:	f7ff ff82 	bl	8000994 <ConsoleCommandEndline>
 8000a90:	60f8      	str	r0, [r7, #12]
		if ( cmdEndline >= 0 )  // have complete string, find command
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db7d      	blt.n	8000b94 <ConsoleProcess+0x150>
		{
			commandTable = ConsoleCommandsGetTable();
 8000a98:	f000 fc30 	bl	80012fc <ConsoleCommandsGetTable>
 8000a9c:	60b8      	str	r0, [r7, #8]
			cmdIndex = 0u;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
			found = NOT_FOUND;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	613b      	str	r3, [r7, #16]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000aa8:	e03d      	b.n	8000b26 <ConsoleProcess+0xe2>
			{
				if ( ConsoleCommandMatch(commandTable[cmdIndex].name, mReceiveBuffer) )
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	4613      	mov	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	4413      	add	r3, r2
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4938      	ldr	r1, [pc, #224]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff feeb 	bl	800089a <ConsoleCommandMatch>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d02a      	beq.n	8000b20 <ConsoleProcess+0xdc>
				{
					result = commandTable[cmdIndex].execute(mReceiveBuffer);
 8000aca:	697a      	ldr	r2, [r7, #20]
 8000acc:	4613      	mov	r3, r2
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	4413      	add	r3, r2
 8000ad2:	00db      	lsls	r3, r3, #3
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000ade:	4798      	blx	r3
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	71fb      	strb	r3, [r7, #7]
					if ( COMMAND_SUCCESS != result )
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d017      	beq.n	8000b1a <ConsoleProcess+0xd6>
					{
						ConsoleIoSendString("Error: ");
 8000aea:	482f      	ldr	r0, [pc, #188]	; (8000ba8 <ConsoleProcess+0x164>)
 8000aec:	f000 fc3e 	bl	800136c <ConsoleIoSendString>
						ConsoleIoSendString(mReceiveBuffer);
 8000af0:	482b      	ldr	r0, [pc, #172]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000af2:	f000 fc3b 	bl	800136c <ConsoleIoSendString>

						ConsoleIoSendString("Help: ");
 8000af6:	482d      	ldr	r0, [pc, #180]	; (8000bac <ConsoleProcess+0x168>)
 8000af8:	f000 fc38 	bl	800136c <ConsoleIoSendString>
						ConsoleIoSendString(commandTable[cmdIndex].help);
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	4613      	mov	r3, r2
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4413      	add	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	461a      	mov	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	3308      	adds	r3, #8
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 fc2c 	bl	800136c <ConsoleIoSendString>
						ConsoleIoSendString(STR_ENDLINE);
 8000b14:	4826      	ldr	r0, [pc, #152]	; (8000bb0 <ConsoleProcess+0x16c>)
 8000b16:	f000 fc29 	bl	800136c <ConsoleIoSendString>

					}
					found = cmdIndex;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	e002      	b.n	8000b26 <ConsoleProcess+0xe2>
				}
				else
				{
					cmdIndex++;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	3301      	adds	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
			while ( ( NULL != commandTable[cmdIndex].name ) && ( NOT_FOUND == found ) )
 8000b26:	697a      	ldr	r2, [r7, #20]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	00db      	lsls	r3, r3, #3
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	461a      	mov	r2, r3
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d003      	beq.n	8000b44 <ConsoleProcess+0x100>
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b42:	d0b2      	beq.n	8000aaa <ConsoleProcess+0x66>

				}
			}
			if ( ( cmdEndline != 0 ) && ( NOT_FOUND == found ) )
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00d      	beq.n	8000b66 <ConsoleProcess+0x122>
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b50:	d109      	bne.n	8000b66 <ConsoleProcess+0x122>
			{
				if (mReceivedSoFar > 2) /// shorter than that, it is probably nothing
 8000b52:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <ConsoleProcess+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2b02      	cmp	r3, #2
 8000b58:	d905      	bls.n	8000b66 <ConsoleProcess+0x122>
				{
					ConsoleIoSendString("Command not found.");
 8000b5a:	4816      	ldr	r0, [pc, #88]	; (8000bb4 <ConsoleProcess+0x170>)
 8000b5c:	f000 fc06 	bl	800136c <ConsoleIoSendString>
					ConsoleIoSendString(STR_ENDLINE);
 8000b60:	4813      	ldr	r0, [pc, #76]	; (8000bb0 <ConsoleProcess+0x16c>)
 8000b62:	f000 fc03 	bl	800136c <ConsoleIoSendString>
				}
			}
			//reset the buffer by moving over any leftovers and nulling the rest
			// clear up to and including the found end line character
			mReceivedSoFar = ConsoleResetBuffer(mReceiveBuffer, mReceivedSoFar, cmdEndline + 1);
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <ConsoleProcess+0x158>)
 8000b68:	6819      	ldr	r1, [r3, #0]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	461a      	mov	r2, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <ConsoleProcess+0x15c>)
 8000b72:	f7ff fede 	bl	8000932 <ConsoleResetBuffer>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <ConsoleProcess+0x158>)
 8000b7a:	6013      	str	r3, [r2, #0]
			mReceiveBufferNeedsChecking = mReceivedSoFar > 0 ? true : false;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <ConsoleProcess+0x158>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	bf14      	ite	ne
 8000b84:	2301      	movne	r3, #1
 8000b86:	2300      	moveq	r3, #0
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <ConsoleProcess+0x160>)
 8000b8c:	701a      	strb	r2, [r3, #0]
			ConsoleIoSendString(CONSOLE_PROMPT);
 8000b8e:	480a      	ldr	r0, [pc, #40]	; (8000bb8 <ConsoleProcess+0x174>)
 8000b90:	f000 fbec 	bl	800136c <ConsoleIoSendString>
		}
	}
}
 8000b94:	bf00      	nop
 8000b96:	3718      	adds	r7, #24
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200002ac 	.word	0x200002ac
 8000ba0:	200001ac 	.word	0x200001ac
 8000ba4:	200002b0 	.word	0x200002b0
 8000ba8:	080036f4 	.word	0x080036f4
 8000bac:	080036fc 	.word	0x080036fc
 8000bb0:	080036ec 	.word	0x080036ec
 8000bb4:	08003704 	.word	0x08003704
 8000bb8:	080036f0 	.word	0x080036f0

08000bbc <ConsoleParamFindN>:

// ConsoleParamFindN
// Find the start location of the nth parametr in the buffer where the command itself is parameter 0
static eCommandResult_T ConsoleParamFindN(const char * buffer, const uint8_t parameterNumber, uint32_t *startLocation)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b089      	sub	sp, #36	; 0x24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	607a      	str	r2, [r7, #4]
 8000bc8:	72fb      	strb	r3, [r7, #11]
	uint32_t bufferIndex = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
	uint32_t parameterIndex = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61bb      	str	r3, [r7, #24]
	eCommandResult_T result = COMMAND_SUCCESS;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	75fb      	strb	r3, [r7, #23]


	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000bd6:	e00b      	b.n	8000bf0 <ConsoleParamFindN+0x34>
	{
		if ( PARAMETER_SEPARATER == buffer[bufferIndex] )
 8000bd8:	68fa      	ldr	r2, [r7, #12]
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	4413      	add	r3, r2
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	d102      	bne.n	8000bea <ConsoleParamFindN+0x2e>
		{
			parameterIndex++;
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	3301      	adds	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
		}
		bufferIndex++;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3301      	adds	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
	while ( ( parameterNumber != parameterIndex ) && ( bufferIndex < CONSOLE_COMMAND_MAX_LENGTH ) )
 8000bf0:	7afb      	ldrb	r3, [r7, #11]
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d002      	beq.n	8000bfe <ConsoleParamFindN+0x42>
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	2bff      	cmp	r3, #255	; 0xff
 8000bfc:	d9ec      	bls.n	8000bd8 <ConsoleParamFindN+0x1c>
	}
	if  ( CONSOLE_COMMAND_MAX_LENGTH == bufferIndex )
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c04:	d102      	bne.n	8000c0c <ConsoleParamFindN+0x50>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000c06:	2310      	movs	r3, #16
 8000c08:	75fb      	strb	r3, [r7, #23]
 8000c0a:	e002      	b.n	8000c12 <ConsoleParamFindN+0x56>
	}
	else
	{
		*startLocation = bufferIndex;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69fa      	ldr	r2, [r7, #28]
 8000c10:	601a      	str	r2, [r3, #0]
	}
	return result;
 8000c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3724      	adds	r7, #36	; 0x24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr

08000c1e <ConsoleReceiveParamInt16>:
// ConsoleReceiveParamInt16
// Identify and obtain a parameter of type int16_t, sent in in decimal, possibly with a negative sign.
// Note that this uses atoi, a somewhat costly function. You may want to replace it, see ConsoleReceiveParamHexUint16
// for some ideas on how to do that.
eCommandResult_T ConsoleReceiveParamInt16(const char * buffer, const uint8_t parameterNumber, int16_t* parameterInt)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b08a      	sub	sp, #40	; 0x28
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	460b      	mov	r3, r1
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
	uint32_t i;
	eCommandResult_T result;
	char charVal;
	char str[INT16_MAX_STR_LENGTH];

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000c30:	f107 021c 	add.w	r2, r7, #28
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	4619      	mov	r1, r3
 8000c38:	68f8      	ldr	r0, [r7, #12]
 8000c3a:	f7ff ffbf 	bl	8000bbc <ConsoleParamFindN>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	i = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
	charVal = buffer[startIndex + i];
 8000c48:	69fa      	ldr	r2, [r7, #28]
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	4413      	add	r3, r2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000c58:	e011      	b.n	8000c7e <ConsoleReceiveParamInt16+0x60>
			&& ( PARAMETER_SEPARATER != charVal )
		&& ( i < INT16_MAX_STR_LENGTH ) )
	{
		str[i] = charVal;					// copy the relevant part
 8000c5a:	f107 0214 	add.w	r2, r7, #20
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	4413      	add	r3, r2
 8000c62:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c66:	701a      	strb	r2, [r3, #0]
		i++;
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
		charVal = buffer[startIndex + i];
 8000c6e:	69fa      	ldr	r2, [r7, #28]
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	4413      	add	r3, r2
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000c7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c82:	2b0a      	cmp	r3, #10
 8000c84:	d00a      	beq.n	8000c9c <ConsoleReceiveParamInt16+0x7e>
 8000c86:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c8a:	2b0d      	cmp	r3, #13
 8000c8c:	d006      	beq.n	8000c9c <ConsoleReceiveParamInt16+0x7e>
			&& ( PARAMETER_SEPARATER != charVal )
 8000c8e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000c92:	2b20      	cmp	r3, #32
 8000c94:	d002      	beq.n	8000c9c <ConsoleReceiveParamInt16+0x7e>
		&& ( i < INT16_MAX_STR_LENGTH ) )
 8000c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c98:	2b07      	cmp	r3, #7
 8000c9a:	d9de      	bls.n	8000c5a <ConsoleReceiveParamInt16+0x3c>
	}
	if ( i == INT16_MAX_STR_LENGTH)
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d102      	bne.n	8000ca8 <ConsoleReceiveParamInt16+0x8a>
	{
		result = COMMAND_PARAMETER_ERROR;
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	}
	if ( COMMAND_SUCCESS == result )
 8000ca8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d10e      	bne.n	8000cce <ConsoleReceiveParamInt16+0xb0>
	{
		str[i] = NULL_CHAR;
 8000cb0:	f107 0214 	add.w	r2, r7, #20
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	4413      	add	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		*parameterInt = atoi(str);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 fc27 	bl	8003514 <atoi>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b21a      	sxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000cce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <ConsoleReceiveParamHexUint16>:

// ConsoleReceiveParamHexUint16
// Identify and obtain a parameter of type uint16, sent in as hex. This parses the number and does not use
// a library function to do it.
eCommandResult_T ConsoleReceiveParamHexUint16(const char * buffer, const uint8_t parameterNumber, uint16_t* parameterUint16)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b08a      	sub	sp, #40	; 0x28
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	60f8      	str	r0, [r7, #12]
 8000ce2:	460b      	mov	r3, r1
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
	uint16_t value = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint32_t i;
	eCommandResult_T result;
	uint8_t tmpUint8;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000cf0:	f107 0218 	add.w	r2, r7, #24
 8000cf4:	7afb      	ldrb	r3, [r7, #11]
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	68f8      	ldr	r0, [r7, #12]
 8000cfa:	f7ff ff5f 	bl	8000bbc <ConsoleParamFindN>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	77fb      	strb	r3, [r7, #31]
	if ( COMMAND_SUCCESS == result )
 8000d02:	7ffb      	ldrb	r3, [r7, #31]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d12c      	bne.n	8000d62 <ConsoleReceiveParamHexUint16+0x88>
	{
		// bufferIndex points to start of integer
		// next separator or newline or NULL indicates end of parameter
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	e01e      	b.n	8000d4c <ConsoleReceiveParamHexUint16+0x72>
		{
			if ( COMMAND_SUCCESS == result )
 8000d0e:	7ffb      	ldrb	r3, [r7, #31]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d10d      	bne.n	8000d30 <ConsoleReceiveParamHexUint16+0x56>
			{
				result = ConsoleUtilHexCharToInt(buffer[startIndex + i], &tmpUint8);
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	4413      	add	r3, r2
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f107 0217 	add.w	r2, r7, #23
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f905 	bl	8000f36 <ConsoleUtilHexCharToInt>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	77fb      	strb	r3, [r7, #31]
			}
			if ( COMMAND_SUCCESS == result )
 8000d30:	7ffb      	ldrb	r3, [r7, #31]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d107      	bne.n	8000d46 <ConsoleReceiveParamHexUint16+0x6c>
			{
				value = (value << 4u);
 8000d36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d38:	011b      	lsls	r3, r3, #4
 8000d3a:	84fb      	strh	r3, [r7, #38]	; 0x26
				value += tmpUint8;
 8000d3c:	7dfb      	ldrb	r3, [r7, #23]
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000d42:	4413      	add	r3, r2
 8000d44:	84fb      	strh	r3, [r7, #38]	; 0x26
		for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000d46:	6a3b      	ldr	r3, [r7, #32]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	6a3b      	ldr	r3, [r7, #32]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d9dd      	bls.n	8000d0e <ConsoleReceiveParamHexUint16+0x34>
			}
		}
		if  ( COMMAND_PARAMETER_END == result )
 8000d52:	7ffb      	ldrb	r3, [r7, #31]
 8000d54:	2b11      	cmp	r3, #17
 8000d56:	d101      	bne.n	8000d5c <ConsoleReceiveParamHexUint16+0x82>
		{
			result = COMMAND_SUCCESS;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	77fb      	strb	r3, [r7, #31]
		}
		*parameterUint16 = value;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d60:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8000d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <ConsoleReceiveParamString>:

// ConsoleReceiveParamString
// Identify and obtain a parameter of type char*.
eCommandResult_T ConsoleReceiveParamString(const char * buffer, const uint8_t parameterNumber, char * parameterStr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	460b      	mov	r3, r1
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	72fb      	strb	r3, [r7, #11]
	uint32_t startIndex = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	617b      	str	r3, [r7, #20]
	uint32_t i;
	eCommandResult_T result;
	char charVal;

	result = ConsoleParamFindN(buffer, parameterNumber, &startIndex);
 8000d7e:	f107 0214 	add.w	r2, r7, #20
 8000d82:	7afb      	ldrb	r3, [r7, #11]
 8000d84:	4619      	mov	r1, r3
 8000d86:	68f8      	ldr	r0, [r7, #12]
 8000d88:	f7ff ff18 	bl	8000bbc <ConsoleParamFindN>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	76bb      	strb	r3, [r7, #26]

	i = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
	charVal = buffer[startIndex + i];
 8000d94:	697a      	ldr	r2, [r7, #20]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	4413      	add	r3, r2
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	76fb      	strb	r3, [r7, #27]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000da2:	e00e      	b.n	8000dc2 <ConsoleReceiveParamString+0x56>
			&& ( PARAMETER_SEPARATER != charVal ) )
	{
		parameterStr[i] = charVal;					// copy the relevant part
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	7efa      	ldrb	r2, [r7, #27]
 8000dac:	701a      	strb	r2, [r3, #0]
		i++;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3301      	adds	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
		charVal = buffer[startIndex + i];
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	4413      	add	r3, r2
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	76fb      	strb	r3, [r7, #27]
	while ( ( LF_CHAR != charVal ) && ( CR_CHAR != charVal )
 8000dc2:	7efb      	ldrb	r3, [r7, #27]
 8000dc4:	2b0a      	cmp	r3, #10
 8000dc6:	d005      	beq.n	8000dd4 <ConsoleReceiveParamString+0x68>
 8000dc8:	7efb      	ldrb	r3, [r7, #27]
 8000dca:	2b0d      	cmp	r3, #13
 8000dcc:	d002      	beq.n	8000dd4 <ConsoleReceiveParamString+0x68>
			&& ( PARAMETER_SEPARATER != charVal ) )
 8000dce:	7efb      	ldrb	r3, [r7, #27]
 8000dd0:	2b20      	cmp	r3, #32
 8000dd2:	d1e7      	bne.n	8000da4 <ConsoleReceiveParamString+0x38>
	}
	
	if ( COMMAND_SUCCESS == result )
 8000dd4:	7ebb      	ldrb	r3, [r7, #26]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d104      	bne.n	8000de4 <ConsoleReceiveParamString+0x78>
	{
		parameterStr[i] = NULL_CHAR;
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	4413      	add	r3, r2
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
	}
	return result;
 8000de4:	7ebb      	ldrb	r3, [r7, #26]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <ConsoleSendParamHexUint16>:
// ConsoleSendParamHexUint16
// Send a parameter of type uint16 as hex.
// This does not use a library function to do it (though you could
// do itoa (parameterUint16, out, 16);  instead of building it up
eCommandResult_T ConsoleSendParamHexUint16(uint16_t parameterUint16)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4603      	mov	r3, r0
 8000df6:	80fb      	strh	r3, [r7, #6]
	uint32_t i;
	char out[4u + 1u];  // U16 must be less than 4 hex digits: 0xFFFF, end buffer with a NULL
	eCommandResult_T result = COMMAND_SUCCESS;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	74fb      	strb	r3, [r7, #19]
	uint8_t tmpUint8;

	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e01b      	b.n	8000e3a <ConsoleSendParamHexUint16+0x4c>
	{
		if ( COMMAND_SUCCESS == result )
 8000e02:	7cfb      	ldrb	r3, [r7, #19]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d115      	bne.n	8000e34 <ConsoleSendParamHexUint16+0x46>
		{
			tmpUint8 = ( parameterUint16 >> (12u - (i*4u)) & 0xF);
 8000e08:	88fa      	ldrh	r2, [r7, #6]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f1c3 0303 	rsb	r3, r3, #3
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	fa42 f303 	asr.w	r3, r2, r3
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	74bb      	strb	r3, [r7, #18]
			result = ConsoleUtilsIntToHexChar(tmpUint8, &(out[i]));
 8000e1e:	f107 020c 	add.w	r2, r7, #12
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	441a      	add	r2, r3
 8000e26:	7cbb      	ldrb	r3, [r7, #18]
 8000e28:	4611      	mov	r1, r2
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f8c3 	bl	8000fb6 <ConsoleUtilsIntToHexChar>
 8000e30:	4603      	mov	r3, r0
 8000e32:	74fb      	strb	r3, [r7, #19]
	for ( i = 0u ; i < 4u ; i ++)   // U16 must be less than 4 hex digits: 0xFFFF
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3301      	adds	r3, #1
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9e0      	bls.n	8000e02 <ConsoleSendParamHexUint16+0x14>
		}
	}
	out[i] = NULL_CHAR;
 8000e40:	f107 020c 	add.w	r2, r7, #12
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	4413      	add	r3, r2
 8000e48:	2200      	movs	r2, #0
 8000e4a:	701a      	strb	r2, [r3, #0]
	ConsoleIoSendString(out);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fa8b 	bl	800136c <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <smallItoa>:
#if CONSOLE_USE_BUILTIN_ITOA
#define itoa smallItoa
// The C library itoa is sometimes a complicated function and the library costs aren't worth it
// so this is implements the parts of the function needed for console.
static void smallItoa(int in, char* outBuffer, int radix)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b089      	sub	sp, #36	; 0x24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	60b9      	str	r1, [r7, #8]
 8000e6a:	607a      	str	r2, [r7, #4]
	bool isNegative = false;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	77fb      	strb	r3, [r7, #31]
	int tmpIn;
	int stringLen = 1u; // it will be at least as long as the NULL character
 8000e70:	2301      	movs	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]

	if (in < 0) {
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	da07      	bge.n	8000e8a <smallItoa+0x2a>
		isNegative = true;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	77fb      	strb	r3, [r7, #31]
		in = -in;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	425b      	negs	r3, r3
 8000e82:	60fb      	str	r3, [r7, #12]
		stringLen++;
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	3301      	adds	r3, #1
 8000e88:	617b      	str	r3, [r7, #20]
	}

	tmpIn = in;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
	while ((int)tmpIn/radix != 0) {
 8000e8e:	e007      	b.n	8000ea0 <smallItoa+0x40>
		tmpIn = (int)tmpIn/radix;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e98:	61bb      	str	r3, [r7, #24]
		stringLen++;
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
	while ((int)tmpIn/radix != 0) {
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d1f1      	bne.n	8000e90 <smallItoa+0x30>
	}
    
    // Now fill it in backwards, starting with the NULL at the end
    *(outBuffer + stringLen) = NULL_CHAR;
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
    stringLen--;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]

	tmpIn = in;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	61bb      	str	r3, [r7, #24]
	do {
		*(outBuffer+stringLen) = (tmpIn%radix)+'0';
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	fb93 f2f2 	sdiv	r2, r3, r2
 8000ec8:	6879      	ldr	r1, [r7, #4]
 8000eca:	fb01 f202 	mul.w	r2, r1, r2
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	68b9      	ldr	r1, [r7, #8]
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3230      	adds	r2, #48	; 0x30
 8000eda:	b2d2      	uxtb	r2, r2
 8000edc:	701a      	strb	r2, [r3, #0]
		tmpIn = (int) tmpIn / radix;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee6:	61bb      	str	r3, [r7, #24]
	} while(stringLen--);
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	617a      	str	r2, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1e6      	bne.n	8000ec0 <smallItoa+0x60>

	if (isNegative) {
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <smallItoa+0x9e>
		*(outBuffer) = '-';
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	222d      	movs	r2, #45	; 0x2d
 8000efc:	701a      	strb	r2, [r3, #0]
	}
}
 8000efe:	bf00      	nop
 8000f00:	3724      	adds	r7, #36	; 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr

08000f08 <ConsoleSendParamInt16>:

// ConsoleSendParamInt16
// Send a parameter of type int16 using the (unsafe) C library function
// itoa to translate from integer to string.
eCommandResult_T ConsoleSendParamInt16(int16_t parameterInt)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	80fb      	strh	r3, [r7, #6]
	char out[INT16_MAX_STR_LENGTH];
//	memset(out, 0, INT16_MAX_STR_LENGTH);

	itoa (parameterInt, out, 10);
 8000f12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f16:	f107 0108 	add.w	r1, r7, #8
 8000f1a:	220a      	movs	r2, #10
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff9f 	bl	8000e60 <smallItoa>
	ConsoleIoSendString(out);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fa20 	bl	800136c <ConsoleIoSendString>

	return COMMAND_SUCCESS;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <ConsoleUtilHexCharToInt>:
	return COMMAND_SUCCESS;
}
// ConsoleUtilHexCharToInt
// Converts a single hex character (0-9,A-F) to an integer (0-15)
static eCommandResult_T ConsoleUtilHexCharToInt(char charVal, uint8_t* pInt)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b085      	sub	sp, #20
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	6039      	str	r1, [r7, #0]
 8000f40:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000f42:	2300      	movs	r3, #0
 8000f44:	73fb      	strb	r3, [r7, #15]

    if ( ( '0' <= charVal ) && ( charVal <= '9' ) )
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	2b2f      	cmp	r3, #47	; 0x2f
 8000f4a:	d908      	bls.n	8000f5e <ConsoleUtilHexCharToInt+0x28>
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b39      	cmp	r3, #57	; 0x39
 8000f50:	d805      	bhi.n	8000f5e <ConsoleUtilHexCharToInt+0x28>
    {
        *pInt = charVal - '0';
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	3b30      	subs	r3, #48	; 0x30
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	701a      	strb	r2, [r3, #0]
 8000f5c:	e025      	b.n	8000faa <ConsoleUtilHexCharToInt+0x74>
    }
    else if ( ( 'A' <= charVal ) && ( charVal <= 'F' ) )
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	2b40      	cmp	r3, #64	; 0x40
 8000f62:	d908      	bls.n	8000f76 <ConsoleUtilHexCharToInt+0x40>
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	2b46      	cmp	r3, #70	; 0x46
 8000f68:	d805      	bhi.n	8000f76 <ConsoleUtilHexCharToInt+0x40>
    {
        *pInt = 10u + charVal - 'A';
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3b37      	subs	r3, #55	; 0x37
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	e019      	b.n	8000faa <ConsoleUtilHexCharToInt+0x74>
    }
    else if( ( 'a' <= charVal ) && ( charVal <= 'f' ) )
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	2b60      	cmp	r3, #96	; 0x60
 8000f7a:	d908      	bls.n	8000f8e <ConsoleUtilHexCharToInt+0x58>
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b66      	cmp	r3, #102	; 0x66
 8000f80:	d805      	bhi.n	8000f8e <ConsoleUtilHexCharToInt+0x58>
    {
        *pInt = 10u + charVal - 'a';
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	3b57      	subs	r3, #87	; 0x57
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	701a      	strb	r2, [r3, #0]
 8000f8c:	e00d      	b.n	8000faa <ConsoleUtilHexCharToInt+0x74>
    }
	else if ( ( LF_CHAR != charVal ) || ( CR_CHAR != charVal )
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	2b0a      	cmp	r3, #10
 8000f92:	d105      	bne.n	8000fa0 <ConsoleUtilHexCharToInt+0x6a>
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b0d      	cmp	r3, #13
 8000f98:	d102      	bne.n	8000fa0 <ConsoleUtilHexCharToInt+0x6a>
			|| ( PARAMETER_SEPARATER == charVal ) )
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b20      	cmp	r3, #32
 8000f9e:	d102      	bne.n	8000fa6 <ConsoleUtilHexCharToInt+0x70>
	{
		result = COMMAND_PARAMETER_END;
 8000fa0:	2311      	movs	r3, #17
 8000fa2:	73fb      	strb	r3, [r7, #15]
 8000fa4:	e001      	b.n	8000faa <ConsoleUtilHexCharToInt+0x74>

	}
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000fa6:	2310      	movs	r3, #16
 8000fa8:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <ConsoleUtilsIntToHexChar>:
// ConsoleUtilsIntToHexChar
// Converts an integer nibble (0-15) to a hex character (0-9,A-F)
static eCommandResult_T ConsoleUtilsIntToHexChar(uint8_t intVal, char* pChar)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b085      	sub	sp, #20
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	6039      	str	r1, [r7, #0]
 8000fc0:	71fb      	strb	r3, [r7, #7]
    eCommandResult_T result = COMMAND_SUCCESS;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]

    if ( intVal <= 9u )
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b09      	cmp	r3, #9
 8000fca:	d805      	bhi.n	8000fd8 <ConsoleUtilsIntToHexChar+0x22>
    {
        *pChar = intVal + '0';
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	3330      	adds	r3, #48	; 0x30
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	701a      	strb	r2, [r3, #0]
 8000fd6:	e00d      	b.n	8000ff4 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else if ( ( 10u <= intVal ) && ( intVal <= 15u ) )
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b09      	cmp	r3, #9
 8000fdc:	d908      	bls.n	8000ff0 <ConsoleUtilsIntToHexChar+0x3a>
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b0f      	cmp	r3, #15
 8000fe2:	d805      	bhi.n	8000ff0 <ConsoleUtilsIntToHexChar+0x3a>
    {
        *pChar = intVal - 10u + 'A';
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3337      	adds	r3, #55	; 0x37
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	701a      	strb	r2, [r3, #0]
 8000fee:	e001      	b.n	8000ff4 <ConsoleUtilsIntToHexChar+0x3e>
    }
    else
    {
        result = COMMAND_PARAMETER_ERROR;
 8000ff0:	2310      	movs	r3, #16
 8000ff2:	73fb      	strb	r3, [r7, #15]
    }

    return result;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <ConsoleSendString>:
// API convention as the rest of the top level ConsoleSendX APIs 
// while exposing this functionality at the top level so 
// that the lower level consoleIo module doesn't need to be
// a dependency.
eCommandResult_T ConsoleSendString(const char *buffer)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	ConsoleIoSendString(buffer);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f9af 	bl	800136c <ConsoleIoSendString>
	return COMMAND_SUCCESS;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800101c:	f3bf 8f4f 	dsb	sy
}
 8001020:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <__NVIC_SystemReset+0x24>)
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800102a:	4904      	ldr	r1, [pc, #16]	; (800103c <__NVIC_SystemReset+0x24>)
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <__NVIC_SystemReset+0x28>)
 800102e:	4313      	orrs	r3, r2
 8001030:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001032:	f3bf 8f4f 	dsb	sy
}
 8001036:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <__NVIC_SystemReset+0x20>
 800103c:	e000ed00 	.word	0xe000ed00
 8001040:	05fa0004 	.word	0x05fa0004

08001044 <ConsoleCommandComment>:

	CONSOLE_COMMAND_TABLE_END // must be LAST
};

static eCommandResult_T ConsoleCommandComment(const char buffer[])
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
	// do nothing
	IGNORE_UNUSED_VARIABLE(buffer);
	return COMMAND_SUCCESS;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	bc80      	pop	{r7}
 8001056:	4770      	bx	lr

08001058 <ConsoleCommandHelp>:

static eCommandResult_T ConsoleCommandHelp(const char buffer[])
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	uint32_t i;
	uint32_t tableLength;
	eCommandResult_T result = COMMAND_SUCCESS;
 8001060:	2300      	movs	r3, #0
 8001062:	74fb      	strb	r3, [r7, #19]

    IGNORE_UNUSED_VARIABLE(buffer);

	tableLength = sizeof(mConsoleCommandTable) / sizeof(mConsoleCommandTable[0]);
 8001064:	2308      	movs	r3, #8
 8001066:	60fb      	str	r3, [r7, #12]
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e01e      	b.n	80010ac <ConsoleCommandHelp+0x54>
	{
		ConsoleIoSendString(mConsoleCommandTable[i].name);
 800106e:	4914      	ldr	r1, [pc, #80]	; (80010c0 <ConsoleCommandHelp+0x68>)
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	4613      	mov	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4413      	add	r3, r2
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	440b      	add	r3, r1
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f974 	bl	800136c <ConsoleIoSendString>
#if CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(" : ");
 8001084:	480f      	ldr	r0, [pc, #60]	; (80010c4 <ConsoleCommandHelp+0x6c>)
 8001086:	f000 f971 	bl	800136c <ConsoleIoSendString>
		ConsoleIoSendString(mConsoleCommandTable[i].help);
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4613      	mov	r3, r2
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	3308      	adds	r3, #8
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <ConsoleCommandHelp+0x68>)
 8001098:	4413      	add	r3, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f966 	bl	800136c <ConsoleIoSendString>
#endif // CONSOLE_COMMAND_MAX_HELP_LENGTH > 0
		ConsoleIoSendString(STR_ENDLINE);
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <ConsoleCommandHelp+0x70>)
 80010a2:	f000 f963 	bl	800136c <ConsoleIoSendString>
	for ( i = 0u ; i < tableLength - 1u ; i++ )
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d3db      	bcc.n	800106e <ConsoleCommandHelp+0x16>
	}
	return result;
 80010b6:	7cfb      	ldrb	r3, [r7, #19]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	080037e8 	.word	0x080037e8
 80010c4:	0800373c 	.word	0x0800373c
 80010c8:	08003740 	.word	0x08003740

080010cc <ConsoleCommandParamExampleInt16>:

static eCommandResult_T ConsoleCommandParamExampleInt16(const char buffer[])
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	int16_t parameterInt;
	eCommandResult_T result;
	result = ConsoleReceiveParamInt16(buffer, 1, &parameterInt);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	461a      	mov	r2, r3
 80010da:	2101      	movs	r1, #1
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fd9e 	bl	8000c1e <ConsoleReceiveParamInt16>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d116      	bne.n	800111a <ConsoleCommandParamExampleInt16+0x4e>
	{
		ConsoleIoSendString("Parameter is ");
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <ConsoleCommandParamExampleInt16+0x58>)
 80010ee:	f000 f93d 	bl	800136c <ConsoleIoSendString>
		ConsoleSendParamInt16(parameterInt);
 80010f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff06 	bl	8000f08 <ConsoleSendParamInt16>
		ConsoleIoSendString(" (0x");
 80010fc:	480a      	ldr	r0, [pc, #40]	; (8001128 <ConsoleCommandParamExampleInt16+0x5c>)
 80010fe:	f000 f935 	bl	800136c <ConsoleIoSendString>
		ConsoleSendParamHexUint16((uint16_t)parameterInt);
 8001102:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001106:	b29b      	uxth	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe70 	bl	8000dee <ConsoleSendParamHexUint16>
		ConsoleIoSendString(")");
 800110e:	4807      	ldr	r0, [pc, #28]	; (800112c <ConsoleCommandParamExampleInt16+0x60>)
 8001110:	f000 f92c 	bl	800136c <ConsoleIoSendString>
		ConsoleIoSendString(STR_ENDLINE);
 8001114:	4806      	ldr	r0, [pc, #24]	; (8001130 <ConsoleCommandParamExampleInt16+0x64>)
 8001116:	f000 f929 	bl	800136c <ConsoleIoSendString>
	}
	return result;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	08003744 	.word	0x08003744
 8001128:	08003754 	.word	0x08003754
 800112c:	0800375c 	.word	0x0800375c
 8001130:	08003740 	.word	0x08003740

08001134 <ConsoleCommandParamExampleHexUint16>:

static eCommandResult_T ConsoleCommandParamExampleHexUint16(const char buffer[])
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint16_t parameterUint16;
	eCommandResult_T result;
	result = ConsoleReceiveParamHexUint16(buffer, 1, &parameterUint16);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	461a      	mov	r2, r3
 8001142:	2101      	movs	r1, #1
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff fdc8 	bl	8000cda <ConsoleReceiveParamHexUint16>
 800114a:	4603      	mov	r3, r0
 800114c:	73fb      	strb	r3, [r7, #15]
	if ( COMMAND_SUCCESS == result )
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <ConsoleCommandParamExampleHexUint16+0x34>
	{
		ConsoleIoSendString("Parameter is 0x");
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <ConsoleCommandParamExampleHexUint16+0x40>)
 8001156:	f000 f909 	bl	800136c <ConsoleIoSendString>
		ConsoleSendParamHexUint16(parameterUint16);
 800115a:	89bb      	ldrh	r3, [r7, #12]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fe46 	bl	8000dee <ConsoleSendParamHexUint16>
		ConsoleIoSendString(STR_ENDLINE);
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <ConsoleCommandParamExampleHexUint16+0x44>)
 8001164:	f000 f902 	bl	800136c <ConsoleIoSendString>
	}
	return result;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	08003760 	.word	0x08003760
 8001178:	08003740 	.word	0x08003740

0800117c <ConsoleCommandVer>:

static eCommandResult_T ConsoleCommandVer(const char buffer[])
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	ConsoleIoSendString(VERSION_STRING);
 8001188:	4805      	ldr	r0, [pc, #20]	; (80011a0 <ConsoleCommandVer+0x24>)
 800118a:	f000 f8ef 	bl	800136c <ConsoleIoSendString>
	ConsoleIoSendString(STR_ENDLINE);
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <ConsoleCommandVer+0x28>)
 8001190:	f000 f8ec 	bl	800136c <ConsoleIoSendString>
	return result;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	08003770 	.word	0x08003770
 80011a4:	08003740 	.word	0x08003740

080011a8 <ConsoleCommandRst>:

static eCommandResult_T ConsoleCommandRst(const char buffer[])
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	eCommandResult_T result = COMMAND_SUCCESS;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

    IGNORE_UNUSED_VARIABLE(buffer);

	NVIC_SystemReset();
 80011b4:	f7ff ff30 	bl	8001018 <__NVIC_SystemReset>

080011b8 <ConsoleCommandLed>:
	ConsoleIoSendString(STR_ENDLINE);
	return result;
}

static eCommandResult_T ConsoleCommandLed(const char buffer[])
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	char parameterLED[CONSOLE_COMMAND_MAX_COMMAND_LENGTH];
	eCommandResult_T result = COMMAND_ERROR;
 80011c0:	23ff      	movs	r3, #255	; 0xff
 80011c2:	75fb      	strb	r3, [r7, #23]
	result = ConsoleReceiveParamString(buffer, 1, parameterLED);
 80011c4:	f107 030c 	add.w	r3, r7, #12
 80011c8:	461a      	mov	r2, r3
 80011ca:	2101      	movs	r1, #1
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff fdcd 	bl	8000d6c <ConsoleReceiveParamString>
 80011d2:	4603      	mov	r3, r0
 80011d4:	75fb      	strb	r3, [r7, #23]

	int16_t paramaterState = -1;
 80011d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011da:	817b      	strh	r3, [r7, #10]

	if ( COMMAND_SUCCESS == result )
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d108      	bne.n	80011f4 <ConsoleCommandLed+0x3c>
	{
		result = ConsoleReceiveParamInt16(buffer, 2, &paramaterState);
 80011e2:	f107 030a 	add.w	r3, r7, #10
 80011e6:	461a      	mov	r2, r3
 80011e8:	2102      	movs	r1, #2
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff fd17 	bl	8000c1e <ConsoleReceiveParamInt16>
 80011f0:	4603      	mov	r3, r0
 80011f2:	75fb      	strb	r3, [r7, #23]
	}
	
	if ( COMMAND_SUCCESS == result )
 80011f4:	7dfb      	ldrb	r3, [r7, #23]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d159      	bne.n	80012ae <ConsoleCommandLed+0xf6>
	{	
		if ( (0 == strcmp("green", parameterLED)) && (0 == paramaterState))
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4619      	mov	r1, r3
 8001200:	4837      	ldr	r0, [pc, #220]	; (80012e0 <ConsoleCommandLed+0x128>)
 8001202:	f7fe ffa3 	bl	800014c <strcmp>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d10c      	bne.n	8001226 <ConsoleCommandLed+0x6e>
 800120c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d108      	bne.n	8001226 <ConsoleCommandLed+0x6e>
		{
			LEDoff(LED_GREEN);
 8001214:	4b33      	ldr	r3, [pc, #204]	; (80012e4 <ConsoleCommandLed+0x12c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a32      	ldr	r2, [pc, #200]	; (80012e4 <ConsoleCommandLed+0x12c>)
 800121a:	8891      	ldrh	r1, [r2, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fc5c 	bl	8001adc <HAL_GPIO_WritePin>
 8001224:	e043      	b.n	80012ae <ConsoleCommandLed+0xf6>
		}
		else if ( (0 == strcmp("green", parameterLED)) && (1 == paramaterState))
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	482c      	ldr	r0, [pc, #176]	; (80012e0 <ConsoleCommandLed+0x128>)
 800122e:	f7fe ff8d 	bl	800014c <strcmp>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10c      	bne.n	8001252 <ConsoleCommandLed+0x9a>
 8001238:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d108      	bne.n	8001252 <ConsoleCommandLed+0x9a>
		{
			LEDon(LED_GREEN);
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <ConsoleCommandLed+0x12c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a27      	ldr	r2, [pc, #156]	; (80012e4 <ConsoleCommandLed+0x12c>)
 8001246:	8891      	ldrh	r1, [r2, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	4618      	mov	r0, r3
 800124c:	f000 fc46 	bl	8001adc <HAL_GPIO_WritePin>
 8001250:	e02d      	b.n	80012ae <ConsoleCommandLed+0xf6>
		}
		else if ( (0 == strcmp("red", parameterLED)) && (0 == paramaterState))
 8001252:	f107 030c 	add.w	r3, r7, #12
 8001256:	4619      	mov	r1, r3
 8001258:	4823      	ldr	r0, [pc, #140]	; (80012e8 <ConsoleCommandLed+0x130>)
 800125a:	f7fe ff77 	bl	800014c <strcmp>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <ConsoleCommandLed+0xc6>
 8001264:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d108      	bne.n	800127e <ConsoleCommandLed+0xc6>
		{
			LEDoff(LED_RED);
 800126c:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <ConsoleCommandLed+0x134>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <ConsoleCommandLed+0x134>)
 8001272:	8891      	ldrh	r1, [r2, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fc30 	bl	8001adc <HAL_GPIO_WritePin>
 800127c:	e017      	b.n	80012ae <ConsoleCommandLed+0xf6>
		}
		else if ( (0 == strcmp("red", parameterLED)) && (1 == paramaterState))
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	4818      	ldr	r0, [pc, #96]	; (80012e8 <ConsoleCommandLed+0x130>)
 8001286:	f7fe ff61 	bl	800014c <strcmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d10c      	bne.n	80012aa <ConsoleCommandLed+0xf2>
 8001290:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d108      	bne.n	80012aa <ConsoleCommandLed+0xf2>
		{
			LEDon(LED_RED);
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <ConsoleCommandLed+0x134>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <ConsoleCommandLed+0x134>)
 800129e:	8891      	ldrh	r1, [r2, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 fc1a 	bl	8001adc <HAL_GPIO_WritePin>
 80012a8:	e001      	b.n	80012ae <ConsoleCommandLed+0xf6>
		}
		else
		{
			result = COMMAND_PARAMETER_ERROR;
 80012aa:	2310      	movs	r3, #16
 80012ac:	75fb      	strb	r3, [r7, #23]
		}
	}
		
	ConsoleIoSendString("LED is ");
 80012ae:	4810      	ldr	r0, [pc, #64]	; (80012f0 <ConsoleCommandLed+0x138>)
 80012b0:	f000 f85c 	bl	800136c <ConsoleIoSendString>
	ConsoleSendString(parameterLED);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fea1 	bl	8001000 <ConsoleSendString>
	ConsoleSendString(" state is ");
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <ConsoleCommandLed+0x13c>)
 80012c0:	f7ff fe9e 	bl	8001000 <ConsoleSendString>
	ConsoleSendParamInt16(paramaterState);
 80012c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe1d 	bl	8000f08 <ConsoleSendParamInt16>

	ConsoleIoSendString(STR_ENDLINE);
 80012ce:	480a      	ldr	r0, [pc, #40]	; (80012f8 <ConsoleCommandLed+0x140>)
 80012d0:	f000 f84c 	bl	800136c <ConsoleIoSendString>

	return result;
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	08003788 	.word	0x08003788
 80012e4:	080037c8 	.word	0x080037c8
 80012e8:	08003790 	.word	0x08003790
 80012ec:	080037c0 	.word	0x080037c0
 80012f0:	08003794 	.word	0x08003794
 80012f4:	0800379c 	.word	0x0800379c
 80012f8:	08003740 	.word	0x08003740

080012fc <ConsoleCommandsGetTable>:

const sConsoleCommandTable_T* ConsoleCommandsGetTable(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	return (mConsoleCommandTable);
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <ConsoleCommandsGetTable+0x10>)
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	080037e8 	.word	0x080037e8

08001310 <ConsoleIoInit>:
#include <stdio.h>

#include "uart.h"

eConsoleError ConsoleIoInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
	return CONSOLE_SUCCESS;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <ConsoleIoReceive>:

eConsoleError ConsoleIoReceive(uint8_t *buffer, const uint32_t bufferLength, uint32_t *readLength)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	60f8      	str	r0, [r7, #12]
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
	uint32_t i = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	617b      	str	r3, [r7, #20]
	uint8_t ch;

	while (UARTisReady())
 800132e:	e010      	b.n	8001352 <ConsoleIoReceive+0x34>
	{
		ch = UARTgetByte();
 8001330:	f7ff fa18 	bl	8000764 <UARTgetByte>
 8001334:	4603      	mov	r3, r0
 8001336:	74fb      	strb	r3, [r7, #19]
		buffer[i] = (uint8_t) ch;
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	4413      	add	r3, r2
 800133e:	7cfa      	ldrb	r2, [r7, #19]
 8001340:	701a      	strb	r2, [r3, #0]
		i++;
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	3301      	adds	r3, #1
 8001346:	617b      	str	r3, [r7, #20]
		UARTsendByte(&ch);
 8001348:	f107 0313 	add.w	r3, r7, #19
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f9ed 	bl	800072c <UARTsendByte>
	while (UARTisReady())
 8001352:	f7ff f9fb 	bl	800074c <UARTisReady>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1e9      	bne.n	8001330 <ConsoleIoReceive+0x12>
	}
	*readLength = i;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	601a      	str	r2, [r3, #0]

	return CONSOLE_SUCCESS;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <ConsoleIoSendString>:

eConsoleError ConsoleIoSendString(const char *buffer)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	while ('\0' != *buffer)
 8001374:	e005      	b.n	8001382 <ConsoleIoSendString+0x16>
	{
		UARTsendByte((uint8_t*)buffer);
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff f9d8 	bl	800072c <UARTsendByte>
		buffer++;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3301      	adds	r3, #1
 8001380:	607b      	str	r3, [r7, #4]
	while ('\0' != *buffer)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f5      	bne.n	8001376 <ConsoleIoSendString+0xa>
	}

	return CONSOLE_SUCCESS;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f923 	bl	80015f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	200f      	movs	r0, #15
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff f8ae 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f93b 	bl	800165a <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f903 	bl	8001606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000000 	.word	0x20000000
 8001418:	20000008 	.word	0x20000008
 800141c:	20000004 	.word	0x20000004

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	20000008 	.word	0x20000008
 8001440:	200002b4 	.word	0x200002b4

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	200002b4 	.word	0x200002b4

08001458 <__NVIC_SetPriorityGrouping>:
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_EnableIRQ>:
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	db0b      	blt.n	80014e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	f003 021f 	and.w	r2, r3, #31
 80014d4:	4906      	ldr	r1, [pc, #24]	; (80014f0 <__NVIC_EnableIRQ+0x34>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	2001      	movs	r0, #1
 80014de:	fa00 f202 	lsl.w	r2, r0, r2
 80014e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bc80      	pop	{r7}
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100

080014f4 <__NVIC_SetPriority>:
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	6039      	str	r1, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001500:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001504:	2b00      	cmp	r3, #0
 8001506:	db0a      	blt.n	800151e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	490c      	ldr	r1, [pc, #48]	; (8001540 <__NVIC_SetPriority+0x4c>)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	0112      	lsls	r2, r2, #4
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	440b      	add	r3, r1
 8001518:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800151c:	e00a      	b.n	8001534 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4908      	ldr	r1, [pc, #32]	; (8001544 <__NVIC_SetPriority+0x50>)
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	3b04      	subs	r3, #4
 800152c:	0112      	lsls	r2, r2, #4
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	440b      	add	r3, r1
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <NVIC_EncodePriority>:
{
 8001548:	b480      	push	{r7}
 800154a:	b089      	sub	sp, #36	; 0x24
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	f1c3 0307 	rsb	r3, r3, #7
 8001562:	2b04      	cmp	r3, #4
 8001564:	bf28      	it	cs
 8001566:	2304      	movcs	r3, #4
 8001568:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	3304      	adds	r3, #4
 800156e:	2b06      	cmp	r3, #6
 8001570:	d902      	bls.n	8001578 <NVIC_EncodePriority+0x30>
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3b03      	subs	r3, #3
 8001576:	e000      	b.n	800157a <NVIC_EncodePriority+0x32>
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 32ff 	mov.w	r2, #4294967295
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	401a      	ands	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001590:	f04f 31ff 	mov.w	r1, #4294967295
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	fa01 f303 	lsl.w	r3, r1, r3
 800159a:	43d9      	mvns	r1, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	4313      	orrs	r3, r2
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3724      	adds	r7, #36	; 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr

080015ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015bc:	d301      	bcc.n	80015c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015be:	2301      	movs	r3, #1
 80015c0:	e00f      	b.n	80015e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <SysTick_Config+0x40>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ca:	210f      	movs	r1, #15
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
 80015d0:	f7ff ff90 	bl	80014f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <SysTick_Config+0x40>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <SysTick_Config+0x40>)
 80015dc:	2207      	movs	r2, #7
 80015de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	e000e010 	.word	0xe000e010

080015f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff2d 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001606:	b580      	push	{r7, lr}
 8001608:	b086      	sub	sp, #24
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001618:	f7ff ff42 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 800161c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6978      	ldr	r0, [r7, #20]
 8001624:	f7ff ff90 	bl	8001548 <NVIC_EncodePriority>
 8001628:	4602      	mov	r2, r0
 800162a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ff5f 	bl	80014f4 <__NVIC_SetPriority>
}
 8001636:	bf00      	nop
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff35 	bl	80014bc <__NVIC_EnableIRQ>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ffa2 	bl	80015ac <SysTick_Config>
 8001668:	4603      	mov	r3, r0
}
 800166a:	4618      	mov	r0, r3
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001684:	2b02      	cmp	r3, #2
 8001686:	d008      	beq.n	800169a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2204      	movs	r2, #4
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e020      	b.n	80016dc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 020e 	bic.w	r2, r2, #14
 80016a8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 0201 	bic.w	r2, r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c2:	2101      	movs	r1, #1
 80016c4:	fa01 f202 	lsl.w	r2, r1, r2
 80016c8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016da:	7bfb      	ldrb	r3, [r7, #15]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d005      	beq.n	800170a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2204      	movs	r2, #4
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	e051      	b.n	80017ae <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 020e 	bic.w	r2, r2, #14
 8001718:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a22      	ldr	r2, [pc, #136]	; (80017b8 <HAL_DMA_Abort_IT+0xd0>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d029      	beq.n	8001788 <HAL_DMA_Abort_IT+0xa0>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a20      	ldr	r2, [pc, #128]	; (80017bc <HAL_DMA_Abort_IT+0xd4>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d022      	beq.n	8001784 <HAL_DMA_Abort_IT+0x9c>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a1f      	ldr	r2, [pc, #124]	; (80017c0 <HAL_DMA_Abort_IT+0xd8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d01a      	beq.n	800177e <HAL_DMA_Abort_IT+0x96>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a1d      	ldr	r2, [pc, #116]	; (80017c4 <HAL_DMA_Abort_IT+0xdc>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d012      	beq.n	8001778 <HAL_DMA_Abort_IT+0x90>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a1c      	ldr	r2, [pc, #112]	; (80017c8 <HAL_DMA_Abort_IT+0xe0>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d00a      	beq.n	8001772 <HAL_DMA_Abort_IT+0x8a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1a      	ldr	r2, [pc, #104]	; (80017cc <HAL_DMA_Abort_IT+0xe4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d102      	bne.n	800176c <HAL_DMA_Abort_IT+0x84>
 8001766:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800176a:	e00e      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 800176c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001770:	e00b      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 8001772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001776:	e008      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 8001778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800177c:	e005      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 800177e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001782:	e002      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 8001784:	2310      	movs	r3, #16
 8001786:	e000      	b.n	800178a <HAL_DMA_Abort_IT+0xa2>
 8001788:	2301      	movs	r3, #1
 800178a:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_DMA_Abort_IT+0xe8>)
 800178c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2200      	movs	r2, #0
 800179a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	4798      	blx	r3
    } 
  }
  return status;
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40020008 	.word	0x40020008
 80017bc:	4002001c 	.word	0x4002001c
 80017c0:	40020030 	.word	0x40020030
 80017c4:	40020044 	.word	0x40020044
 80017c8:	40020058 	.word	0x40020058
 80017cc:	4002006c 	.word	0x4002006c
 80017d0:	40020000 	.word	0x40020000

080017d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b08b      	sub	sp, #44	; 0x2c
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017e6:	e169      	b.n	8001abc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017e8:	2201      	movs	r2, #1
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	429a      	cmp	r2, r3
 8001802:	f040 8158 	bne.w	8001ab6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4a9a      	ldr	r2, [pc, #616]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d05e      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001810:	4a98      	ldr	r2, [pc, #608]	; (8001a74 <HAL_GPIO_Init+0x2a0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d875      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001816:	4a98      	ldr	r2, [pc, #608]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d058      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 800181c:	4a96      	ldr	r2, [pc, #600]	; (8001a78 <HAL_GPIO_Init+0x2a4>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d86f      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001822:	4a96      	ldr	r2, [pc, #600]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d052      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001828:	4a94      	ldr	r2, [pc, #592]	; (8001a7c <HAL_GPIO_Init+0x2a8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d869      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800182e:	4a94      	ldr	r2, [pc, #592]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d04c      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001834:	4a92      	ldr	r2, [pc, #584]	; (8001a80 <HAL_GPIO_Init+0x2ac>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d863      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800183a:	4a92      	ldr	r2, [pc, #584]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d046      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
 8001840:	4a90      	ldr	r2, [pc, #576]	; (8001a84 <HAL_GPIO_Init+0x2b0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d85d      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 8001846:	2b12      	cmp	r3, #18
 8001848:	d82a      	bhi.n	80018a0 <HAL_GPIO_Init+0xcc>
 800184a:	2b12      	cmp	r3, #18
 800184c:	d859      	bhi.n	8001902 <HAL_GPIO_Init+0x12e>
 800184e:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <HAL_GPIO_Init+0x80>)
 8001850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001854:	080018cf 	.word	0x080018cf
 8001858:	080018a9 	.word	0x080018a9
 800185c:	080018bb 	.word	0x080018bb
 8001860:	080018fd 	.word	0x080018fd
 8001864:	08001903 	.word	0x08001903
 8001868:	08001903 	.word	0x08001903
 800186c:	08001903 	.word	0x08001903
 8001870:	08001903 	.word	0x08001903
 8001874:	08001903 	.word	0x08001903
 8001878:	08001903 	.word	0x08001903
 800187c:	08001903 	.word	0x08001903
 8001880:	08001903 	.word	0x08001903
 8001884:	08001903 	.word	0x08001903
 8001888:	08001903 	.word	0x08001903
 800188c:	08001903 	.word	0x08001903
 8001890:	08001903 	.word	0x08001903
 8001894:	08001903 	.word	0x08001903
 8001898:	080018b1 	.word	0x080018b1
 800189c:	080018c5 	.word	0x080018c5
 80018a0:	4a79      	ldr	r2, [pc, #484]	; (8001a88 <HAL_GPIO_Init+0x2b4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018a6:	e02c      	b.n	8001902 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	623b      	str	r3, [r7, #32]
          break;
 80018ae:	e029      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	3304      	adds	r3, #4
 80018b6:	623b      	str	r3, [r7, #32]
          break;
 80018b8:	e024      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	3308      	adds	r3, #8
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e01f      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	330c      	adds	r3, #12
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e01a      	b.n	8001904 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d102      	bne.n	80018dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018d6:	2304      	movs	r3, #4
 80018d8:	623b      	str	r3, [r7, #32]
          break;
 80018da:	e013      	b.n	8001904 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d105      	bne.n	80018f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018e4:	2308      	movs	r3, #8
 80018e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	611a      	str	r2, [r3, #16]
          break;
 80018ee:	e009      	b.n	8001904 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f0:	2308      	movs	r3, #8
 80018f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69fa      	ldr	r2, [r7, #28]
 80018f8:	615a      	str	r2, [r3, #20]
          break;
 80018fa:	e003      	b.n	8001904 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
          break;
 8001900:	e000      	b.n	8001904 <HAL_GPIO_Init+0x130>
          break;
 8001902:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d801      	bhi.n	800190e <HAL_GPIO_Init+0x13a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	e001      	b.n	8001912 <HAL_GPIO_Init+0x13e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3304      	adds	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d802      	bhi.n	8001920 <HAL_GPIO_Init+0x14c>
 800191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	e002      	b.n	8001926 <HAL_GPIO_Init+0x152>
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3b08      	subs	r3, #8
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	210f      	movs	r1, #15
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	fa01 f303 	lsl.w	r3, r1, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	401a      	ands	r2, r3
 8001938:	6a39      	ldr	r1, [r7, #32]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	fa01 f303 	lsl.w	r3, r1, r3
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80b1 	beq.w	8001ab6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	4a4c      	ldr	r2, [pc, #304]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6193      	str	r3, [r2, #24]
 8001960:	4b4a      	ldr	r3, [pc, #296]	; (8001a8c <HAL_GPIO_Init+0x2b8>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800196c:	4a48      	ldr	r2, [pc, #288]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3302      	adds	r3, #2
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f003 0303 	and.w	r3, r3, #3
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	220f      	movs	r2, #15
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <HAL_GPIO_Init+0x2c0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <HAL_GPIO_Init+0x1ec>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a3f      	ldr	r2, [pc, #252]	; (8001a98 <HAL_GPIO_Init+0x2c4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d00d      	beq.n	80019bc <HAL_GPIO_Init+0x1e8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3e      	ldr	r2, [pc, #248]	; (8001a9c <HAL_GPIO_Init+0x2c8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d007      	beq.n	80019b8 <HAL_GPIO_Init+0x1e4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3d      	ldr	r2, [pc, #244]	; (8001aa0 <HAL_GPIO_Init+0x2cc>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d101      	bne.n	80019b4 <HAL_GPIO_Init+0x1e0>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e006      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e004      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e002      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_GPIO_Init+0x1ee>
 80019c0:	2300      	movs	r3, #0
 80019c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c4:	f002 0203 	and.w	r2, r2, #3
 80019c8:	0092      	lsls	r2, r2, #2
 80019ca:	4093      	lsls	r3, r2
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019d2:	492f      	ldr	r1, [pc, #188]	; (8001a90 <HAL_GPIO_Init+0x2bc>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b2d      	ldr	r3, [pc, #180]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	492c      	ldr	r1, [pc, #176]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019fa:	4b2a      	ldr	r3, [pc, #168]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	4928      	ldr	r1, [pc, #160]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a14:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	4922      	ldr	r1, [pc, #136]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	491e      	ldr	r1, [pc, #120]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d006      	beq.n	8001a4a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	608b      	str	r3, [r1, #8]
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a4a:	4b16      	ldr	r3, [pc, #88]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	4914      	ldr	r1, [pc, #80]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d021      	beq.n	8001aa8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a64:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <HAL_GPIO_Init+0x2d0>)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e021      	b.n	8001ab6 <HAL_GPIO_Init+0x2e2>
 8001a72:	bf00      	nop
 8001a74:	10320000 	.word	0x10320000
 8001a78:	10310000 	.word	0x10310000
 8001a7c:	10220000 	.word	0x10220000
 8001a80:	10210000 	.word	0x10210000
 8001a84:	10120000 	.word	0x10120000
 8001a88:	10110000 	.word	0x10110000
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40010000 	.word	0x40010000
 8001a94:	40010800 	.word	0x40010800
 8001a98:	40010c00 	.word	0x40010c00
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40011400 	.word	0x40011400
 8001aa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <HAL_GPIO_Init+0x304>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f47f ae8e 	bne.w	80017e8 <HAL_GPIO_Init+0x14>
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	372c      	adds	r7, #44	; 0x2c
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001af8:	e003      	b.n	8001b02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	041a      	lsls	r2, r3, #16
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	611a      	str	r2, [r3, #16]
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7fe fb2c 	bl	8000188 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010400 	.word	0x40010400

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e272      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	f000 8087 	beq.w	8001c6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b5c:	4b92      	ldr	r3, [pc, #584]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f003 030c 	and.w	r3, r3, #12
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d00c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b68:	4b8f      	ldr	r3, [pc, #572]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 030c 	and.w	r3, r3, #12
 8001b70:	2b08      	cmp	r3, #8
 8001b72:	d112      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
 8001b74:	4b8c      	ldr	r3, [pc, #560]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d10b      	bne.n	8001b9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b82:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d06c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x12c>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d168      	bne.n	8001c68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e24c      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x76>
 8001ba4:	4b80      	ldr	r3, [pc, #512]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a7f      	ldr	r2, [pc, #508]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b7b      	ldr	r3, [pc, #492]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a7a      	ldr	r2, [pc, #488]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b78      	ldr	r3, [pc, #480]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e01d      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bdc:	d10c      	bne.n	8001bf8 <HAL_RCC_OscConfig+0xbc>
 8001bde:	4b72      	ldr	r3, [pc, #456]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a71      	ldr	r2, [pc, #452]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	4b6f      	ldr	r3, [pc, #444]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6e      	ldr	r2, [pc, #440]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0xd4>
 8001bf8:	4b6b      	ldr	r3, [pc, #428]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a6a      	ldr	r2, [pc, #424]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a67      	ldr	r2, [pc, #412]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d013      	beq.n	8001c40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c18:	f7ff fc14 	bl	8001444 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fc10 	bl	8001444 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e200      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	4b5d      	ldr	r3, [pc, #372]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0xe4>
 8001c3e:	e014      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fc00 	bl	8001444 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fbfc 	bl	8001444 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	; 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e1ec      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x10c>
 8001c66:	e000      	b.n	8001c6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d063      	beq.n	8001d3e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c76:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d00b      	beq.n	8001c9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c82:	4b49      	ldr	r3, [pc, #292]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d11c      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
 8001c8e:	4b46      	ldr	r3, [pc, #280]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d116      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c9a:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d001      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e1c0      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb2:	4b3d      	ldr	r3, [pc, #244]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4939      	ldr	r1, [pc, #228]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc6:	e03a      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d020      	beq.n	8001d12 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fbb5 	bl	8001444 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cde:	f7ff fbb1 	bl	8001444 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1a1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0f0      	beq.n	8001cde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4927      	ldr	r1, [pc, #156]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	600b      	str	r3, [r1, #0]
 8001d10:	e015      	b.n	8001d3e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_RCC_OscConfig+0x270>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fb94 	bl	8001444 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d20:	f7ff fb90 	bl	8001444 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e180      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d03a      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	699b      	ldr	r3, [r3, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d019      	beq.n	8001d86 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff fb74 	bl	8001444 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff fb70 	bl	8001444 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e160      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 fad8 	bl	8002334 <RCC_Delay>
 8001d84:	e01c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x274>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fb5a 	bl	8001444 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d92:	e00f      	b.n	8001db4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d94:	f7ff fb56 	bl	8001444 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d908      	bls.n	8001db4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e146      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8001da6:	bf00      	nop
 8001da8:	40021000 	.word	0x40021000
 8001dac:	42420000 	.word	0x42420000
 8001db0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001db4:	4b92      	ldr	r3, [pc, #584]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e9      	bne.n	8001d94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f000 80a6 	beq.w	8001f1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	69db      	ldr	r3, [r3, #28]
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10d      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b88      	ldr	r3, [pc, #544]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	4a87      	ldr	r2, [pc, #540]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	61d3      	str	r3, [r2, #28]
 8001dea:	4b85      	ldr	r3, [pc, #532]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	60bb      	str	r3, [r7, #8]
 8001df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001df6:	2301      	movs	r3, #1
 8001df8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d118      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e06:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7e      	ldr	r2, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e12:	f7ff fb17 	bl	8001444 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e1a:	f7ff fb13 	bl	8001444 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b64      	cmp	r3, #100	; 0x64
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e103      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	4b75      	ldr	r3, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x4c8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x312>
 8001e40:	4b6f      	ldr	r3, [pc, #444]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a6e      	ldr	r2, [pc, #440]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6213      	str	r3, [r2, #32]
 8001e4c:	e02d      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	4a69      	ldr	r2, [pc, #420]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f023 0301 	bic.w	r3, r3, #1
 8001e60:	6213      	str	r3, [r2, #32]
 8001e62:	4b67      	ldr	r3, [pc, #412]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	6a1b      	ldr	r3, [r3, #32]
 8001e66:	4a66      	ldr	r2, [pc, #408]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f023 0304 	bic.w	r3, r3, #4
 8001e6c:	6213      	str	r3, [r2, #32]
 8001e6e:	e01c      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d10c      	bne.n	8001e92 <HAL_RCC_OscConfig+0x356>
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	4a60      	ldr	r2, [pc, #384]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6213      	str	r3, [r2, #32]
 8001e84:	4b5e      	ldr	r3, [pc, #376]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4a5d      	ldr	r2, [pc, #372]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	f043 0301 	orr.w	r3, r3, #1
 8001e8e:	6213      	str	r3, [r2, #32]
 8001e90:	e00b      	b.n	8001eaa <HAL_RCC_OscConfig+0x36e>
 8001e92:	4b5b      	ldr	r3, [pc, #364]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	4a5a      	ldr	r2, [pc, #360]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6213      	str	r3, [r2, #32]
 8001e9e:	4b58      	ldr	r3, [pc, #352]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	4a57      	ldr	r2, [pc, #348]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d015      	beq.n	8001ede <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb2:	f7ff fac7 	bl	8001444 <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb8:	e00a      	b.n	8001ed0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7ff fac3 	bl	8001444 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e0b1      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ee      	beq.n	8001eba <HAL_RCC_OscConfig+0x37e>
 8001edc:	e014      	b.n	8001f08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fab1 	bl	8001444 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff faad 	bl	8001444 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e09b      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001efc:	4b40      	ldr	r3, [pc, #256]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1ee      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d105      	bne.n	8001f1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0e:	4b3c      	ldr	r3, [pc, #240]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a3b      	ldr	r2, [pc, #236]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 8087 	beq.w	8002032 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f24:	4b36      	ldr	r3, [pc, #216]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d061      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d146      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fa81 	bl	8001444 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f46:	f7ff fa7d 	bl	8001444 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e06d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1f0      	bne.n	8001f46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f6c:	d108      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f6e:	4b24      	ldr	r3, [pc, #144]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	4921      	ldr	r1, [pc, #132]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f80:	4b1f      	ldr	r3, [pc, #124]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a19      	ldr	r1, [r3, #32]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	430b      	orrs	r3, r1
 8001f92:	491b      	ldr	r1, [pc, #108]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f98:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9e:	f7ff fa51 	bl	8001444 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa6:	f7ff fa4d 	bl	8001444 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e03d      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x46a>
 8001fc4:	e035      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_OscConfig+0x4cc>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fcc:	f7ff fa3a 	bl	8001444 <HAL_GetTick>
 8001fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd4:	f7ff fa36 	bl	8001444 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e026      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x498>
 8001ff2:	e01e      	b.n	8002032 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d107      	bne.n	800200c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e019      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
 8002000:	40021000 	.word	0x40021000
 8002004:	40007000 	.word	0x40007000
 8002008:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x500>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	429a      	cmp	r2, r3
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d001      	beq.n	8002032 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40021000 	.word	0x40021000

08002040 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d101      	bne.n	8002054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002054:	4b6a      	ldr	r3, [pc, #424]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d910      	bls.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002062:	4b67      	ldr	r3, [pc, #412]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0207 	bic.w	r2, r3, #7
 800206a:	4965      	ldr	r1, [pc, #404]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	4313      	orrs	r3, r2
 8002070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	429a      	cmp	r2, r3
 800207e:	d001      	beq.n	8002084 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b8      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d020      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d005      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800209c:	4b59      	ldr	r3, [pc, #356]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	4a58      	ldr	r2, [pc, #352]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0308 	and.w	r3, r3, #8
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b4:	4b53      	ldr	r3, [pc, #332]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	4a52      	ldr	r2, [pc, #328]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	494d      	ldr	r1, [pc, #308]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d040      	beq.n	8002160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d115      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e07f      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fe:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e073      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210e:	4b3d      	ldr	r3, [pc, #244]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e06b      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0203 	bic.w	r2, r3, #3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4936      	ldr	r1, [pc, #216]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002130:	f7ff f988 	bl	8001444 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	e00a      	b.n	800214e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f984 	bl	8001444 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e053      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 020c 	and.w	r2, r3, #12
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	429a      	cmp	r2, r3
 800215e:	d1eb      	bne.n	8002138 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d210      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4922      	ldr	r1, [pc, #136]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e032      	b.n	80021f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	d008      	beq.n	80021ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800219c:	4b19      	ldr	r3, [pc, #100]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4916      	ldr	r1, [pc, #88]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ba:	4b12      	ldr	r3, [pc, #72]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ce:	f000 f821 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021d2:	4602      	mov	r2, r0
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_ClockConfig+0x1c4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	091b      	lsrs	r3, r3, #4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	490a      	ldr	r1, [pc, #40]	; (8002208 <HAL_RCC_ClockConfig+0x1c8>)
 80021e0:	5ccb      	ldrb	r3, [r1, r3]
 80021e2:	fa22 f303 	lsr.w	r3, r2, r3
 80021e6:	4a09      	ldr	r2, [pc, #36]	; (800220c <HAL_RCC_ClockConfig+0x1cc>)
 80021e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_ClockConfig+0x1d0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f8e6 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40022000 	.word	0x40022000
 8002204:	40021000 	.word	0x40021000
 8002208:	080037d0 	.word	0x080037d0
 800220c:	20000000 	.word	0x20000000
 8002210:	20000004 	.word	0x20000004

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b490      	push	{r4, r7}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800221c:	1d3c      	adds	r4, r7, #4
 800221e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002224:	f240 2301 	movw	r3, #513	; 0x201
 8002228:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800223e:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d002      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0x40>
 800224e:	2b08      	cmp	r3, #8
 8002250:	d003      	beq.n	800225a <HAL_RCC_GetSysClockFreq+0x46>
 8002252:	e02b      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002254:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002256:	623b      	str	r3, [r7, #32]
      break;
 8002258:	e02b      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	0c9b      	lsrs	r3, r3, #18
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	3328      	adds	r3, #40	; 0x28
 8002264:	443b      	add	r3, r7
 8002266:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800226a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d012      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	0c5b      	lsrs	r3, r3, #17
 800227c:	f003 0301 	and.w	r3, r3, #1
 8002280:	3328      	adds	r3, #40	; 0x28
 8002282:	443b      	add	r3, r7
 8002284:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002288:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800228e:	fb03 f202 	mul.w	r2, r3, r2
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	fbb2 f3f3 	udiv	r3, r2, r3
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
 800229a:	e004      	b.n	80022a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	623b      	str	r3, [r7, #32]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ae:	623b      	str	r3, [r7, #32]
      break;
 80022b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b2:	6a3b      	ldr	r3, [r7, #32]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3728      	adds	r7, #40	; 0x28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc90      	pop	{r4, r7}
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	080037a8 	.word	0x080037a8
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	003d0900 	.word	0x003d0900

080022d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d4:	4b02      	ldr	r3, [pc, #8]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e8:	f7ff fff2 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	0a1b      	lsrs	r3, r3, #8
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4903      	ldr	r1, [pc, #12]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	080037e0 	.word	0x080037e0

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002310:	f7ff ffde 	bl	80022d0 <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	0adb      	lsrs	r3, r3, #11
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40021000 	.word	0x40021000
 8002330:	080037e0 	.word	0x080037e0

08002334 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800233c:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <RCC_Delay+0x34>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <RCC_Delay+0x38>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a5b      	lsrs	r3, r3, #9
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	fb02 f303 	mul.w	r3, r2, r3
 800234e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002350:	bf00      	nop
  }
  while (Delay --);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	60fa      	str	r2, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f9      	bne.n	8002350 <RCC_Delay+0x1c>
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000000 	.word	0x20000000
 800236c:	10624dd3 	.word	0x10624dd3

08002370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e041      	b.n	8002406 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe f8ec 	bl	8000574 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f000 f99c 	bl	80026ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b02      	cmp	r3, #2
 8002422:	d122      	bne.n	800246a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d11b      	bne.n	800246a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f06f 0202 	mvn.w	r2, #2
 800243a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f000 f92f 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002456:	e005      	b.n	8002464 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f922 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f931 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b04      	cmp	r3, #4
 8002476:	d122      	bne.n	80024be <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0304 	and.w	r3, r3, #4
 8002482:	2b04      	cmp	r3, #4
 8002484:	d11b      	bne.n	80024be <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f06f 0204 	mvn.w	r2, #4
 800248e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2202      	movs	r2, #2
 8002494:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f905 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 80024aa:	e005      	b.n	80024b8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8f8 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f907 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d122      	bne.n	8002512 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b08      	cmp	r3, #8
 80024d8:	d11b      	bne.n	8002512 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f06f 0208 	mvn.w	r2, #8
 80024e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2204      	movs	r2, #4
 80024e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f8db 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 80024fe:	e005      	b.n	800250c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f8ce 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8dd 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d122      	bne.n	8002566 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b10      	cmp	r3, #16
 800252c:	d11b      	bne.n	8002566 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f06f 0210 	mvn.w	r2, #16
 8002536:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2208      	movs	r2, #8
 800253c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f8b1 	bl	80026b4 <HAL_TIM_IC_CaptureCallback>
 8002552:	e005      	b.n	8002560 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f8a4 	bl	80026a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8b3 	bl	80026c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	2b01      	cmp	r3, #1
 8002572:	d10e      	bne.n	8002592 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f06f 0201 	mvn.w	r2, #1
 800258a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fd fde7 	bl	8000160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b80      	cmp	r3, #128	; 0x80
 800259e:	d10e      	bne.n	80025be <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d107      	bne.n	80025be <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 fa6a 	bl	8002a92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d10e      	bne.n	80025ea <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b40      	cmp	r3, #64	; 0x40
 80025d8:	d107      	bne.n	80025ea <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f000 f877 	bl	80026d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d10e      	bne.n	8002616 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b20      	cmp	r3, #32
 8002604:	d107      	bne.n	8002616 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f06f 0220 	mvn.w	r2, #32
 800260e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fa35 	bl	8002a80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002632:	2302      	movs	r3, #2
 8002634:	e031      	b.n	800269a <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2202      	movs	r2, #2
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002646:	6839      	ldr	r1, [r7, #0]
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f8b1 	bl	80027b0 <TIM_SlaveTimer_SetConfig>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d009      	beq.n	8002668 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e018      	b.n	800269a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002676:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002686:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr

080026c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a26      	ldr	r2, [pc, #152]	; (80027a8 <TIM_Base_SetConfig+0xbc>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x30>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a25      	ldr	r2, [pc, #148]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a1c      	ldr	r2, [pc, #112]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00b      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d007      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <TIM_Base_SetConfig+0xbc>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <TIM_Base_SetConfig+0x62>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <TIM_Base_SetConfig+0xc0>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d108      	bne.n	8002760 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a07      	ldr	r2, [pc, #28]	; (80027a4 <TIM_Base_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d103      	bne.n	8002794 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	691a      	ldr	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	615a      	str	r2, [r3, #20]
}
 800279a:	bf00      	nop
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800

080027b0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b70      	cmp	r3, #112	; 0x70
 80027f4:	d01a      	beq.n	800282c <TIM_SlaveTimer_SetConfig+0x7c>
 80027f6:	2b70      	cmp	r3, #112	; 0x70
 80027f8:	d860      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 80027fa:	2b60      	cmp	r3, #96	; 0x60
 80027fc:	d054      	beq.n	80028a8 <TIM_SlaveTimer_SetConfig+0xf8>
 80027fe:	2b60      	cmp	r3, #96	; 0x60
 8002800:	d85c      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 8002802:	2b50      	cmp	r3, #80	; 0x50
 8002804:	d046      	beq.n	8002894 <TIM_SlaveTimer_SetConfig+0xe4>
 8002806:	2b50      	cmp	r3, #80	; 0x50
 8002808:	d858      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 800280a:	2b40      	cmp	r3, #64	; 0x40
 800280c:	d019      	beq.n	8002842 <TIM_SlaveTimer_SetConfig+0x92>
 800280e:	2b40      	cmp	r3, #64	; 0x40
 8002810:	d854      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d054      	beq.n	80028c0 <TIM_SlaveTimer_SetConfig+0x110>
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d850      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 800281a:	2b20      	cmp	r3, #32
 800281c:	d050      	beq.n	80028c0 <TIM_SlaveTimer_SetConfig+0x110>
 800281e:	2b20      	cmp	r3, #32
 8002820:	d84c      	bhi.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04c      	beq.n	80028c0 <TIM_SlaveTimer_SetConfig+0x110>
 8002826:	2b10      	cmp	r3, #16
 8002828:	d04a      	beq.n	80028c0 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800282a:	e047      	b.n	80028bc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68d9      	ldr	r1, [r3, #12]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f000 f8a3 	bl	8002986 <TIM_ETR_SetConfig>
      break;
 8002840:	e03f      	b.n	80028c2 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d101      	bne.n	800284e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e03a      	b.n	80028c4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6a1a      	ldr	r2, [r3, #32]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0201 	bic.w	r2, r2, #1
 8002864:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002874:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	621a      	str	r2, [r3, #32]
      break;
 8002892:	e016      	b.n	80028c2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	461a      	mov	r2, r3
 80028a2:	f000 f813 	bl	80028cc <TIM_TI1_ConfigInputStage>
      break;
 80028a6:	e00c      	b.n	80028c2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	461a      	mov	r2, r3
 80028b6:	f000 f837 	bl	8002928 <TIM_TI2_ConfigInputStage>
      break;
 80028ba:	e002      	b.n	80028c2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80028c0:	bf00      	nop
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	011b      	lsls	r3, r3, #4
 80028fc:	693a      	ldr	r2, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f023 030a 	bic.w	r3, r3, #10
 8002908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	621a      	str	r2, [r3, #32]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002928:	b480      	push	{r7}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f023 0210 	bic.w	r2, r3, #16
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002952:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	031b      	lsls	r3, r3, #12
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002964:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	4313      	orrs	r3, r2
 800296e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	621a      	str	r2, [r3, #32]
}
 800297c:	bf00      	nop
 800297e:	371c      	adds	r7, #28
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002986:	b480      	push	{r7}
 8002988:	b087      	sub	sp, #28
 800298a:	af00      	add	r7, sp, #0
 800298c:	60f8      	str	r0, [r7, #12]
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	607a      	str	r2, [r7, #4]
 8002992:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	021a      	lsls	r2, r3, #8
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e046      	b.n	8002a6a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d00e      	beq.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d009      	beq.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d10c      	bne.n	8002a58 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	68ba      	ldr	r2, [r7, #8]
 8002a56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	40012c00 	.word	0x40012c00
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40000800 	.word	0x40000800

08002a80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e03f      	b.n	8002b36 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fd fd70 	bl	80005b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	; 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fc85 	bl	80033f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2220      	movs	r2, #32
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2220      	movs	r2, #32
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3708      	adds	r7, #8
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b08a      	sub	sp, #40	; 0x28
 8002b42:	af02      	add	r7, sp, #8
 8002b44:	60f8      	str	r0, [r7, #12]
 8002b46:	60b9      	str	r1, [r7, #8]
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d17c      	bne.n	8002c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_UART_Transmit+0x2c>
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e075      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_UART_Transmit+0x3e>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e06e      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2221      	movs	r2, #33	; 0x21
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b92:	f7fe fc57 	bl	8001444 <HAL_GetTick>
 8002b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	88fa      	ldrh	r2, [r7, #6]
 8002b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	88fa      	ldrh	r2, [r7, #6]
 8002ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bac:	d108      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d104      	bne.n	8002bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	e003      	b.n	8002bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002bd0:	e02a      	b.n	8002c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2180      	movs	r1, #128	; 0x80
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fa38 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e036      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10b      	bne.n	8002c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	3302      	adds	r3, #2
 8002c06:	61bb      	str	r3, [r7, #24]
 8002c08:	e007      	b.n	8002c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	3301      	adds	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1cf      	bne.n	8002bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	9300      	str	r3, [sp, #0]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	2140      	movs	r1, #64	; 0x40
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fa08 	bl	8003052 <UART_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e006      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3720      	adds	r7, #32
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d11d      	bne.n	8002cb8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_UART_Receive_IT+0x26>
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e016      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Receive_IT+0x38>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e00f      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002ca8:	88fb      	ldrh	r3, [r7, #6]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f000 fa19 	bl	80030e6 <UART_Start_Receive_IT>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	e000      	b.n	8002cba <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002cb8:	2302      	movs	r3, #2
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	; 0x28
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10d      	bne.n	8002d16 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d008      	beq.n	8002d16 <HAL_UART_IRQHandler+0x52>
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fac9 	bl	80032a6 <UART_Receive_IT>
      return;
 8002d14:	e17b      	b.n	800300e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80b1 	beq.w	8002e80 <HAL_UART_IRQHandler+0x1bc>
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_UART_IRQHandler+0x70>
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80a6 	beq.w	8002e80 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00a      	beq.n	8002d54 <HAL_UART_IRQHandler+0x90>
 8002d3e:	6a3b      	ldr	r3, [r7, #32]
 8002d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	f043 0201 	orr.w	r2, r3, #1
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_UART_IRQHandler+0xb0>
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f043 0202 	orr.w	r2, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_UART_IRQHandler+0xd0>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d005      	beq.n	8002d94 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	f043 0204 	orr.w	r2, r3, #4
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00f      	beq.n	8002dbe <HAL_UART_IRQHandler+0xfa>
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d104      	bne.n	8002db2 <HAL_UART_IRQHandler+0xee>
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d005      	beq.n	8002dbe <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db6:	f043 0208 	orr.w	r2, r3, #8
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 811e 	beq.w	8003004 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_UART_IRQHandler+0x11e>
 8002dd2:	6a3b      	ldr	r3, [r7, #32]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 fa62 	bl	80032a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf14      	ite	ne
 8002df0:	2301      	movne	r3, #1
 8002df2:	2300      	moveq	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <HAL_UART_IRQHandler+0x146>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d031      	beq.n	8002e6e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f9a4 	bl	8003158 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d023      	beq.n	8002e66 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e2c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d013      	beq.n	8002e5e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	4a76      	ldr	r2, [pc, #472]	; (8003014 <HAL_UART_IRQHandler+0x350>)
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fc50 	bl	80016e8 <HAL_DMA_Abort_IT>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5c:	e00e      	b.n	8002e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8e3 	bl	800302a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e64:	e00a      	b.n	8002e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f8df 	bl	800302a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e6c:	e006      	b.n	8002e7c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f8db 	bl	800302a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002e7a:	e0c3      	b.n	8003004 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e7c:	bf00      	nop
    return;
 8002e7e:	e0c1      	b.n	8003004 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	f040 80a1 	bne.w	8002fcc <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 809b 	beq.w	8002fcc <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	f000 8095 	beq.w	8002fcc <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d04e      	beq.n	8002f64 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002ed0:	8a3b      	ldrh	r3, [r7, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 8098 	beq.w	8003008 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002edc:	8a3a      	ldrh	r2, [r7, #16]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	f080 8092 	bcs.w	8003008 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8a3a      	ldrh	r2, [r7, #16]
 8002ee8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d02b      	beq.n	8002f4c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f02:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695a      	ldr	r2, [r3, #20]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695a      	ldr	r2, [r3, #20]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f22:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0210 	bic.w	r2, r2, #16
 8002f40:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	4618      	mov	r0, r3
 8002f48:	f7fe fb93 	bl	8001672 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f86d 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002f62:	e051      	b.n	8003008 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d047      	beq.n	800300c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002f7c:	8a7b      	ldrh	r3, [r7, #18]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d044      	beq.n	800300c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f90:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0210 	bic.w	r2, r2, #16
 8002fbe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fc0:	8a7b      	ldrh	r3, [r7, #18]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f839 	bl	800303c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002fca:	e01f      	b.n	800300c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x324>
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f000 f8f9 	bl	80031d8 <UART_Transmit_IT>
    return;
 8002fe6:	e012      	b.n	800300e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <HAL_UART_IRQHandler+0x34a>
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f93a 	bl	8003276 <UART_EndTransmit_IT>
    return;
 8003002:	e004      	b.n	800300e <HAL_UART_IRQHandler+0x34a>
    return;
 8003004:	bf00      	nop
 8003006:	e002      	b.n	800300e <HAL_UART_IRQHandler+0x34a>
      return;
 8003008:	bf00      	nop
 800300a:	e000      	b.n	800300e <HAL_UART_IRQHandler+0x34a>
      return;
 800300c:	bf00      	nop
  }
}
 800300e:	3728      	adds	r7, #40	; 0x28
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	080031b1 	.word	0x080031b1

08003018 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003020:	bf00      	nop
 8003022:	370c      	adds	r7, #12
 8003024:	46bd      	mov	sp, r7
 8003026:	bc80      	pop	{r7}
 8003028:	4770      	bx	lr

0800302a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800302a:	b480      	push	{r7}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	460b      	mov	r3, r1
 8003046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	bc80      	pop	{r7}
 8003050:	4770      	bx	lr

08003052 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b084      	sub	sp, #16
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	60b9      	str	r1, [r7, #8]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003062:	e02c      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d028      	beq.n	80030be <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <UART_WaitOnFlagUntilTimeout+0x30>
 8003072:	f7fe f9e7 	bl	8001444 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	429a      	cmp	r2, r3
 8003080:	d21d      	bcs.n	80030be <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003090:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	695a      	ldr	r2, [r3, #20]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0201 	bic.w	r2, r2, #1
 80030a0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e00f      	b.n	80030de <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4013      	ands	r3, r2
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	bf0c      	ite	eq
 80030ce:	2301      	moveq	r3, #1
 80030d0:	2300      	movne	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	79fb      	ldrb	r3, [r7, #7]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d0c3      	beq.n	8003064 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	4613      	mov	r3, r2
 80030f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	88fa      	ldrh	r2, [r7, #6]
 8003104:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2222      	movs	r2, #34	; 0x22
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800312a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0220 	orr.w	r2, r2, #32
 800314a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800316e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68da      	ldr	r2, [r3, #12]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0210 	bic.w	r2, r2, #16
 8003196:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr

080031b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff ff2d 	bl	800302a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b21      	cmp	r3, #33	; 0x21
 80031ea:	d13e      	bne.n	800326a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f4:	d114      	bne.n	8003220 <UART_Transmit_IT+0x48>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d110      	bne.n	8003220 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003212:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	621a      	str	r2, [r3, #32]
 800321e:	e008      	b.n	8003232 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	1c59      	adds	r1, r3, #1
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6211      	str	r1, [r2, #32]
 800322a:	781a      	ldrb	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	4619      	mov	r1, r3
 8003240:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10f      	bne.n	8003266 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003264:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800328c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff febe 	bl	8003018 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b22      	cmp	r3, #34	; 0x22
 80032b8:	f040 8099 	bne.w	80033ee <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c4:	d117      	bne.n	80032f6 <UART_Receive_IT+0x50>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d113      	bne.n	80032f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
 80032f4:	e026      	b.n	8003344 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d007      	beq.n	800331a <UART_Receive_IT+0x74>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10a      	bne.n	8003328 <UART_Receive_IT+0x82>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e008      	b.n	800333a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003334:	b2da      	uxtb	r2, r3
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4619      	mov	r1, r3
 8003352:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003354:	2b00      	cmp	r3, #0
 8003356:	d148      	bne.n	80033ea <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68da      	ldr	r2, [r3, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 0220 	bic.w	r2, r2, #32
 8003366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2b01      	cmp	r3, #1
 8003396:	d123      	bne.n	80033e0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f022 0210 	bic.w	r2, r2, #16
 80033ac:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b10      	cmp	r3, #16
 80033ba:	d10a      	bne.n	80033d2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033d6:	4619      	mov	r1, r3
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f7ff fe2f 	bl	800303c <HAL_UARTEx_RxEventCallback>
 80033de:	e002      	b.n	80033e6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fd f985 	bl	80006f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e002      	b.n	80033f0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e000      	b.n	80033f0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033ee:	2302      	movs	r3, #2
  }
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	4313      	orrs	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003432:	f023 030c 	bic.w	r3, r3, #12
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	430b      	orrs	r3, r1
 800343e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a2c      	ldr	r2, [pc, #176]	; (800350c <UART_SetConfig+0x114>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d103      	bne.n	8003468 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7fe ff54 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 8003464:	60f8      	str	r0, [r7, #12]
 8003466:	e002      	b.n	800346e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003468:	f7fe ff3c 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 800346c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4613      	mov	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	009a      	lsls	r2, r3, #2
 8003478:	441a      	add	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fbb2 f3f3 	udiv	r3, r2, r3
 8003484:	4a22      	ldr	r2, [pc, #136]	; (8003510 <UART_SetConfig+0x118>)
 8003486:	fba2 2303 	umull	r2, r3, r2, r3
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	0119      	lsls	r1, r3, #4
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	009a      	lsls	r2, r3, #2
 8003498:	441a      	add	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <UART_SetConfig+0x118>)
 80034a6:	fba3 0302 	umull	r0, r3, r3, r2
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2064      	movs	r0, #100	; 0x64
 80034ae:	fb00 f303 	mul.w	r3, r0, r3
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	3332      	adds	r3, #50	; 0x32
 80034b8:	4a15      	ldr	r2, [pc, #84]	; (8003510 <UART_SetConfig+0x118>)
 80034ba:	fba2 2303 	umull	r2, r3, r2, r3
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034c4:	4419      	add	r1, r3
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009a      	lsls	r2, r3, #2
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <UART_SetConfig+0x118>)
 80034de:	fba3 0302 	umull	r0, r3, r3, r2
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2064      	movs	r0, #100	; 0x64
 80034e6:	fb00 f303 	mul.w	r3, r0, r3
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	4a07      	ldr	r2, [pc, #28]	; (8003510 <UART_SetConfig+0x118>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	f003 020f 	and.w	r2, r3, #15
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	440a      	add	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40013800 	.word	0x40013800
 8003510:	51eb851f 	.word	0x51eb851f

08003514 <atoi>:
 8003514:	220a      	movs	r2, #10
 8003516:	2100      	movs	r1, #0
 8003518:	f000 b8ae 	b.w	8003678 <strtol>

0800351c <__errno>:
 800351c:	4b01      	ldr	r3, [pc, #4]	; (8003524 <__errno+0x8>)
 800351e:	6818      	ldr	r0, [r3, #0]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	2000000c 	.word	0x2000000c

08003528 <__libc_init_array>:
 8003528:	b570      	push	{r4, r5, r6, lr}
 800352a:	2600      	movs	r6, #0
 800352c:	4d0c      	ldr	r5, [pc, #48]	; (8003560 <__libc_init_array+0x38>)
 800352e:	4c0d      	ldr	r4, [pc, #52]	; (8003564 <__libc_init_array+0x3c>)
 8003530:	1b64      	subs	r4, r4, r5
 8003532:	10a4      	asrs	r4, r4, #2
 8003534:	42a6      	cmp	r6, r4
 8003536:	d109      	bne.n	800354c <__libc_init_array+0x24>
 8003538:	f000 f8a8 	bl	800368c <_init>
 800353c:	2600      	movs	r6, #0
 800353e:	4d0a      	ldr	r5, [pc, #40]	; (8003568 <__libc_init_array+0x40>)
 8003540:	4c0a      	ldr	r4, [pc, #40]	; (800356c <__libc_init_array+0x44>)
 8003542:	1b64      	subs	r4, r4, r5
 8003544:	10a4      	asrs	r4, r4, #2
 8003546:	42a6      	cmp	r6, r4
 8003548:	d105      	bne.n	8003556 <__libc_init_array+0x2e>
 800354a:	bd70      	pop	{r4, r5, r6, pc}
 800354c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003550:	4798      	blx	r3
 8003552:	3601      	adds	r6, #1
 8003554:	e7ee      	b.n	8003534 <__libc_init_array+0xc>
 8003556:	f855 3b04 	ldr.w	r3, [r5], #4
 800355a:	4798      	blx	r3
 800355c:	3601      	adds	r6, #1
 800355e:	e7f2      	b.n	8003546 <__libc_init_array+0x1e>
 8003560:	08003b2c 	.word	0x08003b2c
 8003564:	08003b2c 	.word	0x08003b2c
 8003568:	08003b2c 	.word	0x08003b2c
 800356c:	08003b30 	.word	0x08003b30

08003570 <memset>:
 8003570:	4603      	mov	r3, r0
 8003572:	4402      	add	r2, r0
 8003574:	4293      	cmp	r3, r2
 8003576:	d100      	bne.n	800357a <memset+0xa>
 8003578:	4770      	bx	lr
 800357a:	f803 1b01 	strb.w	r1, [r3], #1
 800357e:	e7f9      	b.n	8003574 <memset+0x4>

08003580 <_strtol_l.constprop.0>:
 8003580:	2b01      	cmp	r3, #1
 8003582:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003586:	4680      	mov	r8, r0
 8003588:	d001      	beq.n	800358e <_strtol_l.constprop.0+0xe>
 800358a:	2b24      	cmp	r3, #36	; 0x24
 800358c:	d906      	bls.n	800359c <_strtol_l.constprop.0+0x1c>
 800358e:	f7ff ffc5 	bl	800351c <__errno>
 8003592:	2316      	movs	r3, #22
 8003594:	6003      	str	r3, [r0, #0]
 8003596:	2000      	movs	r0, #0
 8003598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359c:	460d      	mov	r5, r1
 800359e:	4f35      	ldr	r7, [pc, #212]	; (8003674 <_strtol_l.constprop.0+0xf4>)
 80035a0:	4628      	mov	r0, r5
 80035a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035a6:	5de6      	ldrb	r6, [r4, r7]
 80035a8:	f016 0608 	ands.w	r6, r6, #8
 80035ac:	d1f8      	bne.n	80035a0 <_strtol_l.constprop.0+0x20>
 80035ae:	2c2d      	cmp	r4, #45	; 0x2d
 80035b0:	d12f      	bne.n	8003612 <_strtol_l.constprop.0+0x92>
 80035b2:	2601      	movs	r6, #1
 80035b4:	782c      	ldrb	r4, [r5, #0]
 80035b6:	1c85      	adds	r5, r0, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d057      	beq.n	800366c <_strtol_l.constprop.0+0xec>
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d109      	bne.n	80035d4 <_strtol_l.constprop.0+0x54>
 80035c0:	2c30      	cmp	r4, #48	; 0x30
 80035c2:	d107      	bne.n	80035d4 <_strtol_l.constprop.0+0x54>
 80035c4:	7828      	ldrb	r0, [r5, #0]
 80035c6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80035ca:	2858      	cmp	r0, #88	; 0x58
 80035cc:	d149      	bne.n	8003662 <_strtol_l.constprop.0+0xe2>
 80035ce:	2310      	movs	r3, #16
 80035d0:	786c      	ldrb	r4, [r5, #1]
 80035d2:	3502      	adds	r5, #2
 80035d4:	2700      	movs	r7, #0
 80035d6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80035da:	f10e 3eff 	add.w	lr, lr, #4294967295
 80035de:	fbbe f9f3 	udiv	r9, lr, r3
 80035e2:	4638      	mov	r0, r7
 80035e4:	fb03 ea19 	mls	sl, r3, r9, lr
 80035e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80035ec:	f1bc 0f09 	cmp.w	ip, #9
 80035f0:	d814      	bhi.n	800361c <_strtol_l.constprop.0+0x9c>
 80035f2:	4664      	mov	r4, ip
 80035f4:	42a3      	cmp	r3, r4
 80035f6:	dd22      	ble.n	800363e <_strtol_l.constprop.0+0xbe>
 80035f8:	2f00      	cmp	r7, #0
 80035fa:	db1d      	blt.n	8003638 <_strtol_l.constprop.0+0xb8>
 80035fc:	4581      	cmp	r9, r0
 80035fe:	d31b      	bcc.n	8003638 <_strtol_l.constprop.0+0xb8>
 8003600:	d101      	bne.n	8003606 <_strtol_l.constprop.0+0x86>
 8003602:	45a2      	cmp	sl, r4
 8003604:	db18      	blt.n	8003638 <_strtol_l.constprop.0+0xb8>
 8003606:	2701      	movs	r7, #1
 8003608:	fb00 4003 	mla	r0, r0, r3, r4
 800360c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003610:	e7ea      	b.n	80035e8 <_strtol_l.constprop.0+0x68>
 8003612:	2c2b      	cmp	r4, #43	; 0x2b
 8003614:	bf04      	itt	eq
 8003616:	782c      	ldrbeq	r4, [r5, #0]
 8003618:	1c85      	addeq	r5, r0, #2
 800361a:	e7cd      	b.n	80035b8 <_strtol_l.constprop.0+0x38>
 800361c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003620:	f1bc 0f19 	cmp.w	ip, #25
 8003624:	d801      	bhi.n	800362a <_strtol_l.constprop.0+0xaa>
 8003626:	3c37      	subs	r4, #55	; 0x37
 8003628:	e7e4      	b.n	80035f4 <_strtol_l.constprop.0+0x74>
 800362a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800362e:	f1bc 0f19 	cmp.w	ip, #25
 8003632:	d804      	bhi.n	800363e <_strtol_l.constprop.0+0xbe>
 8003634:	3c57      	subs	r4, #87	; 0x57
 8003636:	e7dd      	b.n	80035f4 <_strtol_l.constprop.0+0x74>
 8003638:	f04f 37ff 	mov.w	r7, #4294967295
 800363c:	e7e6      	b.n	800360c <_strtol_l.constprop.0+0x8c>
 800363e:	2f00      	cmp	r7, #0
 8003640:	da07      	bge.n	8003652 <_strtol_l.constprop.0+0xd2>
 8003642:	2322      	movs	r3, #34	; 0x22
 8003644:	4670      	mov	r0, lr
 8003646:	f8c8 3000 	str.w	r3, [r8]
 800364a:	2a00      	cmp	r2, #0
 800364c:	d0a4      	beq.n	8003598 <_strtol_l.constprop.0+0x18>
 800364e:	1e69      	subs	r1, r5, #1
 8003650:	e005      	b.n	800365e <_strtol_l.constprop.0+0xde>
 8003652:	b106      	cbz	r6, 8003656 <_strtol_l.constprop.0+0xd6>
 8003654:	4240      	negs	r0, r0
 8003656:	2a00      	cmp	r2, #0
 8003658:	d09e      	beq.n	8003598 <_strtol_l.constprop.0+0x18>
 800365a:	2f00      	cmp	r7, #0
 800365c:	d1f7      	bne.n	800364e <_strtol_l.constprop.0+0xce>
 800365e:	6011      	str	r1, [r2, #0]
 8003660:	e79a      	b.n	8003598 <_strtol_l.constprop.0+0x18>
 8003662:	2430      	movs	r4, #48	; 0x30
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1b5      	bne.n	80035d4 <_strtol_l.constprop.0+0x54>
 8003668:	2308      	movs	r3, #8
 800366a:	e7b3      	b.n	80035d4 <_strtol_l.constprop.0+0x54>
 800366c:	2c30      	cmp	r4, #48	; 0x30
 800366e:	d0a9      	beq.n	80035c4 <_strtol_l.constprop.0+0x44>
 8003670:	230a      	movs	r3, #10
 8003672:	e7af      	b.n	80035d4 <_strtol_l.constprop.0+0x54>
 8003674:	08003a29 	.word	0x08003a29

08003678 <strtol>:
 8003678:	4613      	mov	r3, r2
 800367a:	460a      	mov	r2, r1
 800367c:	4601      	mov	r1, r0
 800367e:	4802      	ldr	r0, [pc, #8]	; (8003688 <strtol+0x10>)
 8003680:	6800      	ldr	r0, [r0, #0]
 8003682:	f7ff bf7d 	b.w	8003580 <_strtol_l.constprop.0>
 8003686:	bf00      	nop
 8003688:	2000000c 	.word	0x2000000c

0800368c <_init>:
 800368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368e:	bf00      	nop
 8003690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003692:	bc08      	pop	{r3}
 8003694:	469e      	mov	lr, r3
 8003696:	4770      	bx	lr

08003698 <_fini>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr
